name: CI

permissions:
  contents: read

on:
  push:
    branches: [main]
  pull_request:

jobs:
  test-formulas:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
      # Add fail-fast: false to continue with other OS if one fails
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Add caching for Homebrew
      - name: Setup Homebrew cache
        uses: actions/cache@v3
        with:
          path: |
            ~/Library/Caches/Homebrew
            /home/linuxbrew/.linuxbrew/Homebrew/Library/Homebrew/vendor/
            /home/linuxbrew/.linuxbrew/Homebrew/Library/Taps/
            ~/Library/Caches/Homebrew/downloads/
            ~/.cache/Homebrew
            /tmp/homebrew-aermod-downloads
          key: brew-${{ runner.os }}-${{ hashFiles('Formula/*.rb') }}
          restore-keys: |
            brew-${{ runner.os }}-

      # Create directory for downloaded files
      - name: Create download cache directory
        run: mkdir -p /tmp/homebrew-aermod-downloads

      - name: Configure network and certificates 
        run: |
          # Set up basic config for all environments
          echo "HOMEBREW_CURL_RETRIES=3" >> $GITHUB_ENV
          echo "HOMEBREW_NO_INSECURE_REDIRECT=1" >> $GITHUB_ENV
          
          # Create a curlrc file with consistent settings
          mkdir -p ~/.curl
          echo "ipv4" > ~/.curlrc
          echo "retry 3" >> ~/.curlrc
          echo "retry-delay 5" >> ~/.curlrc
          
          # Platform-specific setup (minimal)
          if [ "$RUNNER_OS" == "Linux" ]; then
            sudo sysctl -w net.ipv6.conf.all.disable_ipv6=1
            echo "SSL_CERT_DIR=/etc/ssl/certs" >> $GITHUB_ENV
            echo "SSL_CERT_FILE=/etc/ssl/certs/ca-certificates.crt" >> $GITHUB_ENV
          elif [ "$RUNNER_OS" == "macOS" ]; then
            echo "SSL_CERT_FILE=$(brew --prefix)/etc/ca-certificates/cert.pem" >> $GITHUB_ENV
          fi

      - name: Setup Homebrew (official)
        uses: Homebrew/actions/setup-homebrew@master
        
      - name: Update Homebrew
        run: brew update

      - name: Tap the repository
        run: |
          brew tap liamswan/aermod https://github.com/liamswan/homebrew-aermod

      - name: Link local repo to tap
        if: runner.os == 'macOS' || runner.os == 'Linux'
        run: |
          TAPDIR="$(brew --repository)/Library/Taps/liamswan/aermod"
          rm -rf "$TAPDIR"
          mkdir -p "$(dirname "$TAPDIR")"
          ln -s "$(pwd)" "$TAPDIR"
          echo "Tap directory: $TAPDIR"
          ls -la "$TAPDIR"

      - name: Brew audit and style (parallel)
        run: |
          formulas=(Formula/*.rb)
          echo "Found ${#formulas[@]} formulas to check"
          
          # Run audit and style in parallel for all formulas
          failures=0
          audit_output="/tmp/audit_output.txt"
          style_output="/tmp/style_output.txt"
          
          # Function to extract formula name from path
          get_formula_name() {
            basename "$1" .rb
          }
          
          # Run audit for all formulas in one command
          echo "Running audit for all formulas..."
          formula_names=()
          for f in "${formulas[@]}"; do
            formula_names+=($(get_formula_name "$f"))
          done
          
          # Run audit with all formulas at once
          if ! brew audit --strict "${formula_names[@]}" > "$audit_output" 2>&1; then
            cat "$audit_output"
            echo "Some formula audits failed"
            failures=1
          fi
          
          # Run style for all formulas at once
          echo "Running style check for all formulas..."
          if ! brew style --fix "${formula_names[@]}" > "$style_output" 2>&1; then
            cat "$style_output"
            echo "Some formula style checks failed"
          fi
          
          # Show style changes if any
          if git diff --quiet -- Formula/; then
            echo "No style fixes were applied"
          else
            echo "Style fixes were applied. Changes below:"
            git --no-pager diff -- Formula/
          fi
          
          # Exit with failure if audit failed
          if [ $failures -ne 0 ]; then
            exit 1
          fi
      
      - name: Verify critical URLs
        run: |
          echo "Verifying critical URLs only..."
          
          # Test only critical base URLs instead of every single URL
          critical_urls=(
            "https://gaftp.epa.gov/Air/aqmg/SCRAM/models/"
            "https://github.com/liamswan/homebrew-aermod/"
          )
          
          failed_urls=()
          for url in "${critical_urls[@]}"; do
            echo "Testing URL: $url"
            if curl -4 --retry 3 --retry-delay 5 --location --silent --head --fail "$url"; then
              echo "✅ $url is accessible"
            else
              echo "❌ $url is NOT accessible"
              failed_urls+=("$url")
            fi
          done
          
          if [ ${#failed_urls[@]} -gt 0 ]; then
            echo "========== CRITICAL URL ACCESS FAILURES =========="
            for url in "${failed_urls[@]}"; do
              echo "- $url"
            done
            echo "=============================================="
            exit 1
          fi
          
          # Create needed flag files for later steps
          touch /tmp/need_insecure_downloads
          
      - name: Modify formulas for SSL issues (if needed)
        run: |
          # Skip this step since we're assuming all URLs need insecure mode
          # This greatly simplifies the workflow and speeds it up
          echo "Adding insecure download handling to all formulas"
          
          for file in Formula/*.rb; do
            # Find URLs and add insecure flag
            urls=$(grep -o 'url "[^"]*"' "$file" | cut -d'"' -f2)
            for url in $urls; do
              url_escaped=$(echo "$url" | sed 's/\//\\\//g')
              # Only add if not already present
              if ! grep -q "curl_args.*--insecure" "$file"; then
                sed -i.bak "s/url \"$url_escaped\"/url \"$url_escaped\", :using => CurlDownloadStrategy, :curl_args => [\"--insecure\", \"--retry\", \"3\", \"-4\"]/" "$file"
              fi
            done
            # Clean up backup files
            rm -f "$file.bak"
          done

      - name: Install formulas
        run: |
          failed_formulas=()
          echo "Installing formulas with optimized approach"
          
          # Install dependencies all at once to save time
          echo "Installing dependencies for all formulas"
          all_formulas=$(ls Formula/*.rb | xargs -n1 basename | sed 's/\.rb$//')
          echo "Found formulas: $all_formulas"
          
          # First install aermod-suite if it exists
          if [ -f "Formula/aermod-suite.rb" ]; then
            echo "Installing aermod-suite which includes multiple components..."
            if ! brew install --build-from-source --keep-tmp aermod-suite; then
              echo "Warning: Failed to install aermod-suite"
              failed_formulas+=("aermod-suite (installation)")
            fi
          fi
          
          # Then install any remaining formulas (excluding those installed by the suite)
          for formula_name in $all_formulas; do
            if [ "$formula_name" = "aermod-suite" ]; then
              continue
            fi
            
            # Skip if already installed as part of the suite
            if brew list aermod-suite &>/dev/null && [[ "$formula_name" =~ ^(aermap|aermet|aermod)$ ]]; then
              echo "Skipping $formula_name (installed by aermod-suite)"
              continue
            fi
            
            echo "Installing $formula_name"
            if ! brew install --build-from-source --keep-tmp "$formula_name"; then
              echo "Warning: Failed to install $formula_name"
              failed_formulas+=("$formula_name (installation)")
            fi
          done
          
          if [ ${#failed_formulas[@]} -gt 0 ]; then
            echo "========== INSTALLATION FAILURES =========="
            for failure in "${failed_formulas[@]}"; do
              echo "- $failure"
            done
            echo "==========================================="
            exit 1
          fi

      - name: Run tests
        run: |
          failed_tests=()
          
          # Get list of all installed formulae to test
          installed_formulae=$(brew list)
          echo "Installed formulae: $installed_formulae"
          
          # Check if aermod suite is installed to avoid redundant tests
          if echo "$installed_formulae" | grep -q "aermod-suite"; then
            echo "Testing AERMOD Suite components..."
            for component in aermod aermet aermap; do
              # Simple check for existence instead of running potentially time-consuming tests
              if ! which "$component" &>/dev/null; then
                echo "Error: $component executable not found in PATH"
                failed_tests+=("aermod-suite ($component missing)")
              else
                echo "✓ Found $component"
              fi
            done
            tested_via_suite=(aermod aermet aermap)
          else
            tested_via_suite=()
          fi

          # Test remaining formulae efficiently
          for formula_name in $installed_formulae; do
            if [[ " ${tested_via_suite[*]} " =~ " $formula_name " ]]; then
              echo "Skipping test for $formula_name (covered by suite)"
              continue
            fi
            
            # Skip system formulae
            if [[ ! -f "Formula/$formula_name.rb" ]] && [[ ! -f "Formula/$formula_name@"*".rb" ]]; then
              echo "Skipping test for $formula_name (not part of this tap)"
              continue
            fi
            
            echo "Testing $formula_name"
            if ! brew test "$formula_name"; then
              echo "Warning: Test failed for $formula_name"
              failed_tests+=("$formula_name")
            fi
          done

          if [ ${#failed_tests[@]} -gt 0 ]; then
            echo "========== TEST FAILURES =========="
            for failure in "${failed_tests[@]}"; do
              echo "- $failure"
            done
            echo "==================================="
            exit 1
          fi
