name: Weekly AERMOD Suite Version Check

on:
  schedule:
    # Run weekly on Monday at 1:00 AM UTC
    - cron: '0 1 * * 1'
  workflow_dispatch:
    inputs:
      force_run:
        description: 'Force run update and test jobs even if no new versions are found'
        required: false
        default: false # Ensure default is a boolean
        type: boolean
      manual_version_check:
        description: 'Override automatic version check and force specific version numbers'
        required: false
        default: false
        type: boolean
      aermod_version:
        description: 'Manual AERMOD version (only used if manual_version_check is true)'
        required: false
        type: string
      aermet_version:
        description: 'Manual AERMET version (only used if manual_version_check is true)'
        required: false
        type: string
      aermap_version:
        description: 'Manual AERMAP version (only used if manual_version_check is true)'
        required: false
        type: string

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  check-for-new-versions:
    name: Check for new versions
    runs-on: ubuntu-latest
    outputs:
      aermod_new_version: ${{ steps.aermod-check.outputs.new_version }}
      aermod_current_version: ${{ steps.aermod-check.outputs.current_version }}
      aermod_update_needed: ${{ steps.aermod-check.outputs.update_needed }}
      
      aermet_new_version: ${{ steps.aermet-check.outputs.new_version }}
      aermet_current_version: ${{ steps.aermet-check.outputs.current_version }}
      aermet_update_needed: ${{ steps.aermet-check.outputs.update_needed }}
      
      aermap_new_version: ${{ steps.aermap-check.outputs.new_version }}
      aermap_current_version: ${{ steps.aermap-check.outputs.current_version }}
      aermap_update_needed: ${{ steps.aermap-check.outputs.update_needed }}
      
      any_updates: ${{ steps.check-any-updates.outputs.any_updates }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Check AERMOD versions
        id: aermod-check
        run: |
          # Get current version from formula
          CURRENT_VERSION=$(grep -o 'version "[0-9]*"' Formula/aermod.rb | grep -o '[0-9]*')
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          
          # Check if we should use manual version
          if [ "${{ github.event.inputs.manual_version_check }}" == "true" ] && [ -n "${{ github.event.inputs.aermod_version }}" ]; then
            LATEST_VERSION="${{ github.event.inputs.aermod_version }}"
            echo "Using manually provided AERMOD version: $LATEST_VERSION"
          else
            # Get latest version from EPA website
            LATEST_VERSION=$(bash scripts/fetch_latest_aermod.sh --version-only || echo "")
          fi
          
          # If version retrieval failed, use the current version to avoid failures
          if [ -z "$LATEST_VERSION" ]; then
            echo "::warning::Failed to retrieve latest AERMOD version, using current version instead"
            LATEST_VERSION=$CURRENT_VERSION
            echo "new_version=$LATEST_VERSION" >> $GITHUB_OUTPUT
            echo "update_needed=false" >> $GITHUB_OUTPUT
            echo "No new AERMOD version check performed due to EPA website issues. Current version: $CURRENT_VERSION"
          else
            echo "new_version=$LATEST_VERSION" >> $GITHUB_OUTPUT
            
            # Compare versions
            if [ "$CURRENT_VERSION" != "$LATEST_VERSION" ] || [ "${{ github.event.inputs.manual_version_check }}" == "true" ]; then
              echo "update_needed=true" >> $GITHUB_OUTPUT
              echo "New AERMOD version detected: $LATEST_VERSION (current: $CURRENT_VERSION)"
            else
              echo "update_needed=false" >> $GITHUB_OUTPUT
              echo "No new AERMOD version available. Current version: $CURRENT_VERSION"
            fi
          fi
      
      - name: Check AERMET versions
        id: aermet-check
        run: |
          # Get current version from formula
          CURRENT_VERSION=$(grep -o 'version "[0-9]*"' Formula/aermet.rb | grep -o '[0-9]*')
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          
          # Check if we should use manual version
          if [ "${{ github.event.inputs.manual_version_check }}" == "true" ] && [ -n "${{ github.event.inputs.aermet_version }}" ]; then
            LATEST_VERSION="${{ github.event.inputs.aermet_version }}"
            echo "Using manually provided AERMET version: $LATEST_VERSION"
          else
            # Get latest version from EPA website
            LATEST_VERSION=$(bash scripts/fetch_latest_aermet.sh --version-only || echo "")
          fi
          
          # If version retrieval failed, use the current version to avoid failures
          if [ -z "$LATEST_VERSION" ]; then
            echo "::warning::Failed to retrieve latest AERMET version, using current version instead"
            LATEST_VERSION=$CURRENT_VERSION
            echo "new_version=$LATEST_VERSION" >> $GITHUB_OUTPUT
            echo "update_needed=false" >> $GITHUB_OUTPUT
            echo "No new AERMET version check performed due to EPA website issues. Current version: $CURRENT_VERSION"
          else
            echo "new_version=$LATEST_VERSION" >> $GITHUB_OUTPUT
            
            # Compare versions
            if [ "$CURRENT_VERSION" != "$LATEST_VERSION" ] || [ "${{ github.event.inputs.manual_version_check }}" == "true" ]; then
              echo "update_needed=true" >> $GITHUB_OUTPUT
              echo "New AERMET version detected: $LATEST_VERSION (current: $CURRENT_VERSION)"
            else
              echo "update_needed=false" >> $GITHUB_OUTPUT
              echo "No new AERMET version available. Current version: $CURRENT_VERSION"
            fi
          fi
      
      - name: Check AERMAP versions
        id: aermap-check
        run: |
          # Get current version from formula
          CURRENT_VERSION=$(grep -o 'version "[0-9]*"' Formula/aermap.rb | grep -o '[0-9]*')
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          
          # Check if we should use manual version
          if [ "${{ github.event.inputs.manual_version_check }}" == "true" ] && [ -n "${{ github.event.inputs.aermap_version }}" ]; then
            LATEST_VERSION="${{ github.event.inputs.aermap_version }}"
            echo "Using manually provided AERMAP version: $LATEST_VERSION"
          else
            # Get latest version from EPA website
            LATEST_VERSION=$(bash scripts/fetch_latest_aermap.sh --version-only || echo "")
          fi
          
          # If version retrieval failed, use the current version to avoid failures
          if [ -z "$LATEST_VERSION" ]; then
            echo "::warning::Failed to retrieve latest AERMAP version, using current version instead"
            LATEST_VERSION=$CURRENT_VERSION
            echo "new_version=$LATEST_VERSION" >> $GITHUB_OUTPUT
            echo "update_needed=false" >> $GITHUB_OUTPUT
            echo "No new AERMAP version check performed due to EPA website issues. Current version: $CURRENT_VERSION"
          else
            echo "new_version=$LATEST_VERSION" >> $GITHUB_OUTPUT
            
            # Compare versions
            if [ "$CURRENT_VERSION" != "$LATEST_VERSION" ] || [ "${{ github.event.inputs.manual_version_check }}" == "true" ]; then
              echo "update_needed=true" >> $GITHUB_OUTPUT
              echo "New AERMAP version detected: $LATEST_VERSION (current: $CURRENT_VERSION)"
            else
              echo "update_needed=false" >> $GITHUB_OUTPUT
              echo "No new AERMAP version available. Current version: $CURRENT_VERSION"
            fi
          fi
      
      - name: Check if any updates are needed
        id: check-any-updates
        run: |
          if [ "${{ steps.aermod-check.outputs.update_needed }}" == "true" ] || 
             [ "${{ steps.aermet-check.outputs.update_needed }}" == "true" ] || 
             [ "${{ steps.aermap-check.outputs.update_needed }}" == "true" ]; then
            echo "any_updates=true" >> $GITHUB_OUTPUT
            echo "Updates are needed for at least one component"
          else
            echo "any_updates=false" >> $GITHUB_OUTPUT
            echo "No updates needed for any component"
          fi

  update-formulas:
    name: Update formulas with new versions
    needs: check-for-new-versions
    # Run if any component has an update OR if force_run is explicitly true
    if: needs.check-for-new-versions.outputs.any_updates == 'true' || github.event.inputs.force_run == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      # Download and update AERMOD if needed
      - name: Download new AERMOD version
        # This step only runs if an update for AERMOD is actually needed
        if: needs.check-for-new-versions.outputs.aermod_update_needed == 'true'
        id: download-aermod
        run: |
          # Create downloads and checksums directories if they don't exist
          mkdir -p downloads checksums
          
          echo "Downloading AERMOD version ${{ needs.check-for-new-versions.outputs.aermod_new_version }}..."
          if bash scripts/fetch_latest_aermod.sh "${{ needs.check-for-new-versions.outputs.aermod_new_version }}"; then
            # Validate the downloaded file
            if [ -f "downloads/aermod_${{ needs.check-for-new-versions.outputs.aermod_new_version }}.zip" ]; then
              file_size=$(stat -c%s "downloads/aermod_${{ needs.check-for-new-versions.outputs.aermod_new_version }}.zip" || echo "0")
              if [ "$file_size" -gt "1000" ]; then
                echo "download_success=true" >> $GITHUB_OUTPUT
                echo "Downloaded AERMOD successfully ($(($file_size/1024))KB)"
              else
                echo "::error::Downloaded AERMOD file is too small (${file_size} bytes)"
                echo "download_success=false" >> $GITHUB_OUTPUT
              fi
            else
              echo "::error::AERMOD download file not found"
              echo "download_success=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "::warning::Failed to download AERMOD ${{ needs.check-for-new-versions.outputs.aermod_new_version }}"
            echo "download_success=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Extract AERMOD checksum
        if: needs.check-for-new-versions.outputs.aermod_update_needed == 'true' && steps.download-aermod.outputs.download_success == 'true'
        id: extract-aermod-checksum
        run: |
          if [ -f "checksums/aermod_${{ needs.check-for-new-versions.outputs.aermod_new_version }}.sha256" ]; then
            CHECKSUM=$(cat checksums/aermod_${{ needs.check-for-new-versions.outputs.aermod_new_version }}.sha256)
            echo "checksum=$CHECKSUM" >> $GITHUB_OUTPUT
            echo "checksum_success=true" >> $GITHUB_OUTPUT
          else
            echo "::error::Checksum file not found for AERMOD ${{ needs.check-for-new-versions.outputs.aermod_new_version }}"
            echo "checksum_success=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Update AERMOD formula
        if: needs.check-for-new-versions.outputs.aermod_update_needed == 'true' && steps.download-aermod.outputs.download_success == 'true' && steps.extract-aermod-checksum.outputs.checksum_success == 'true'
        run: |
          NEW_VERSION="${{ needs.check-for-new-versions.outputs.aermod_new_version }}"
          CHECKSUM="${{ steps.extract-aermod-checksum.outputs.checksum }}"
          TAG_DATE=$(date +%Y%m%d)
          
          # Update version and checksum in aermod.rb
          sed -i "s/version \"[0-9]*\"/version \"$NEW_VERSION\"/" Formula/aermod.rb
          sed -i "s|url \"https://gaftp.epa.gov/Air/aqmg/SCRAM/models/preferred/aermod/aermod_source.zip\"|url \"https://gaftp.epa.gov/Air/aqmg/SCRAM/models/preferred/aermod/aermod_source.zip\"|" Formula/aermod.rb
          sed -i "s/sha256 \"[a-f0-9]*\"/sha256 \"$CHECKSUM\"/" Formula/aermod.rb
          sed -i "s/sha256 :no_check/sha256 \"$CHECKSUM\"/" Formula/aermod.rb
          
          # Add or update resource for this version
          if grep -q "resource \"aermod_$NEW_VERSION\"" Formula/aermod.rb; then
            # Update existing resource
            sed -i "/resource \"aermod_$NEW_VERSION\"/,/end/ s|url \".*\"|url \"https://github.com/${{ github.repository }}/releases/download/v$TAG_DATE/aermod_$NEW_VERSION.zip\"|" Formula/aermod.rb
            sed -i "/resource \"aermod_$NEW_VERSION\"/,/end/ s/sha256 \"[a-f0-9]*\"/sha256 \"$CHECKSUM\"/" Formula/aermod.rb
          else
            # Add new resource
            RESOURCE_BLOCK="  resource \"aermod_$NEW_VERSION\" do\n    url \"https://github.com/${{ github.repository }}/releases/download/v$TAG_DATE/aermod_$NEW_VERSION.zip\"\n    sha256 \"$CHECKSUM\"\n  end\n"
            sed -i "/# Versioned resources for specific versions/a\\$RESOURCE_BLOCK" Formula/aermod.rb
          fi
          
          # Create versioned formula if it doesn't exist
          if [ ! -f "Formula/aermod@$NEW_VERSION.rb" ]; then
            cp Formula/aermod.rb "Formula/aermod@$NEW_VERSION.rb"
            sed -i "s/class Aermod < Formula/class AermodAT$NEW_VERSION < Formula/" "Formula/aermod@$NEW_VERSION.rb"
          fi
      
      # Download and update AERMET if needed
      - name: Download new AERMET version
        if: needs.check-for-new-versions.outputs.aermet_update_needed == 'true'
        id: download-aermet
        run: |
          # Create downloads and checksums directories if they don't exist
          mkdir -p downloads checksums

          echo "Downloading AERMET version ${{ needs.check-for-new-versions.outputs.aermet_new_version }}..."
          if bash scripts/fetch_latest_aermet.sh "${{ needs.check-for-new-versions.outputs.aermet_new_version }}"; then
            # Validate the downloaded file
            if [ -f "downloads/aermet_${{ needs.check-for-new-versions.outputs.aermet_new_version }}.zip" ]; then
              file_size=$(stat -c%s "downloads/aermet_${{ needs.check-for-new-versions.outputs.aermet_new_version }}.zip" || echo "0")
              if [ "$file_size" -gt "1000" ]; then
                echo "download_success=true" >> $GITHUB_OUTPUT
                echo "Downloaded AERMET successfully ($(($file_size/1024))KB)"
              else
                echo "download_success=false" >> $GITHUB_OUTPUT
                echo "Downloaded AERMET file is too small ($file_size bytes). Download may have failed or the file is empty."
              fi
            else
              echo "download_success=false" >> $GITHUB_OUTPUT
              echo "AERMET download failed, file not found: downloads/aermet_${{ needs.check-for-new-versions.outputs.aermet_new_version }}.zip"
            fi
          else
            echo "download_success=false" >> $GITHUB_OUTPUT
            echo "Failed to execute fetch_latest_aermet.sh for version ${{ needs.check-for-new-versions.outputs.aermet_new_version }}"
          fi
      
      - name: Extract AERMET checksum
        if: needs.check-for-new-versions.outputs.aermet_update_needed == 'true' && steps.download-aermet.outputs.download_success == 'true'
        id: extract-aermet-checksum
        run: |
          if [ -f "checksums/aermet_${{ needs.check-for-new-versions.outputs.aermet_new_version }}.sha256" ]; then
            CHECKSUM=$(cat checksums/aermet_${{ needs.check-for-new-versions.outputs.aermet_new_version }}.sha256)
            echo "checksum=$CHECKSUM" >> $GITHUB_OUTPUT
            echo "checksum_success=true" >> $GITHUB_OUTPUT
          else
            echo "::error::Checksum file not found for AERMET ${{ needs.check-for-new-versions.outputs.aermet_new_version }}"
            echo "checksum_success=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Update AERMET formula
        if: needs.check-for-new-versions.outputs.aermet_update_needed == 'true' && steps.download-aermet.outputs.download_success == 'true' && steps.extract-aermet-checksum.outputs.checksum_success == 'true'
        run: |
          NEW_VERSION="${{ needs.check-for-new-versions.outputs.aermet_new_version }}"
          CHECKSUM="${{ steps.extract-aermet-checksum.outputs.checksum }}"
          TAG_DATE=$(date +%Y%m%d)
          
          # Update version and checksum in aermet.rb
          sed -i "s/version \"[0-9]*\"/version \"$NEW_VERSION\"/" Formula/aermet.rb
          sed -i "s|url \"https://gaftp.epa.gov/Air/aqmg/SCRAM/models/met/aermet/aermet_source.zip\"|url \"https://gaftp.epa.gov/Air/aqmg/SCRAM/models/met/aermet/aermet_source.zip\"|" Formula/aermet.rb
          sed -i "s/sha256 \"[a-f0-9]*\"/sha256 \"$CHECKSUM\"/" Formula/aermet.rb
          sed -i "s/sha256 :no_check/sha256 \"$CHECKSUM\"/" Formula/aermet.rb
          
          # Add or update resource for this version
          if grep -q "resource \"aermet_$NEW_VERSION\"" Formula/aermet.rb; then
            # Update existing resource
            sed -i "/resource \"aermet_$NEW_VERSION\"/,/end/ s|url \".*\"|url \"https://github.com/${{ github.repository }}/releases/download/v$TAG_DATE/aermet_$NEW_VERSION.zip\"|" Formula/aermet.rb
            sed -i "/resource \"aermet_$NEW_VERSION\"/,/end/ s/sha256 \"[a-f0-9]*\"/sha256 \"$CHECKSUM\"/" Formula/aermet.rb
          else
            # Add new resource
            RESOURCE_BLOCK="  resource \"aermet_$NEW_VERSION\" do\n    url \"https://github.com/${{ github.repository }}/releases/download/v$TAG_DATE/aermet_$NEW_VERSION.zip\"\n    sha256 \"$CHECKSUM\"\n  end\n"
            sed -i "/# Versioned resources for specific versions/a\\$RESOURCE_BLOCK" Formula/aermet.rb
          fi
          
          # Create versioned formula if it doesn't exist
          if [ ! -f "Formula/aermet@$NEW_VERSION.rb" ]; then
            cp Formula/aermet.rb "Formula/aermet@$NEW_VERSION.rb"
            sed -i "s/class Aermet < Formula/class AermetAT$NEW_VERSION < Formula/" "Formula/aermet@$NEW_VERSION.rb"
          fi
      
      # Download and update AERMAP if needed
      - name: Download new AERMAP version
        if: needs.check-for-new-versions.outputs.aermap_update_needed == 'true'
        id: download-aermap
        run: |
          # Create downloads and checksums directories if they don't exist
          mkdir -p downloads checksums

          echo "Downloading AERMAP version ${{ needs.check-for-new-versions.outputs.aermap_new_version }}..."
          if bash scripts/fetch_latest_aermap.sh "${{ needs.check-for-new-versions.outputs.aermap_new_version }}"; then
            # Validate the downloaded file
            if [ -f "downloads/aermap_${{ needs.check-for-new-versions.outputs.aermap_new_version }}.zip" ]; then
              file_size=$(stat -c%s "downloads/aermap_${{ needs.check-for-new-versions.outputs.aermap_new_version }}.zip" || echo "0")
              if [ "$file_size" -gt "1000" ]; then # Check if file size is greater than 1KB
                echo "download_success=true" >> $GITHUB_OUTPUT
                echo "Downloaded AERMAP successfully ($(($file_size/1024))KB)."
              else
                echo "download_success=false" >> $GITHUB_OUTPUT
                echo "Downloaded AERMAP file is too small ($file_size bytes). Download may have failed or the file is empty."
              fi
            else
              echo "download_success=false" >> $GITHUB_OUTPUT
              echo "AERMAP download failed, file not found: downloads/aermap_${{ needs.check-for-new-versions.outputs.aermap_new_version }}.zip"
            fi
          else
            echo "download_success=false" >> $GITHUB_OUTPUT
            echo "Failed to execute fetch_latest_aermap.sh for version ${{ needs.check-for-new-versions.outputs.aermap_new_version }}"
          fi
      
      - name: Extract AERMAP checksum
        if: needs.check-for-new-versions.outputs.aermap_update_needed == 'true' && steps.download-aermap.outputs.download_success == 'true'
        id: extract-aermap-checksum
        run: |
          if [ -f "checksums/aermap_${{ needs.check-for-new-versions.outputs.aermap_new_version }}.sha256" ]; then
            CHECKSUM=$(cat checksums/aermap_${{ needs.check-for-new-versions.outputs.aermap_new_version }}.sha256)
            echo "checksum=$CHECKSUM" >> $GITHUB_OUTPUT
            echo "checksum_success=true" >> $GITHUB_OUTPUT
          else
            echo "::error::Checksum file not found for AERMAP ${{ needs.check-for-new-versions.outputs.aermap_new_version }}"
            echo "checksum_success=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Update AERMAP formula
        if: needs.check-for-new-versions.outputs.aermap_update_needed == 'true' && steps.download-aermap.outputs.download_success == 'true' && steps.extract-aermap-checksum.outputs.checksum_success == 'true'
        run: |
          NEW_VERSION="${{ needs.check-for-new-versions.outputs.aermap_new_version }}"
          CHECKSUM="${{ steps.extract-aermap-checksum.outputs.checksum }}"
          TAG_DATE=$(date +%Y%m%d)
          
          # Update version and checksum in aermap.rb
          sed -i "s/version \"[0-9]*\"/version \"$NEW_VERSION\"/" Formula/aermap.rb
          sed -i "s|url \"https://gaftp.epa.gov/Air/aqmg/SCRAM/models/related/aermap/aermap_source.zip\"|url \"https://gaftp.epa.gov/Air/aqmg/SCRAM/models/related/aermap/aermap_source.zip\"|" Formula/aermap.rb
          sed -i "s/sha256 \"[a-f0-9]*\"/sha256 \"$CHECKSUM\"/" Formula/aermap.rb
          sed -i "s/sha256 :no_check/sha256 \"$CHECKSUM\"/" Formula/aermap.rb
          
          # Add or update resource for this version
          if grep -q "resource \"aermap_$NEW_VERSION\"" Formula/aermap.rb; then
            # Update existing resource
            sed -i "/resource \"aermap_$NEW_VERSION\"/,/end/ s|url \".*\"|url \"https://github.com/${{ github.repository }}/releases/download/v$TAG_DATE/aermap_$NEW_VERSION.zip\"|" Formula/aermap.rb
            sed -i "/resource \"aermap_$NEW_VERSION\"/,/end/ s/sha256 \"[a-f0-9]*\"/sha256 \"$CHECKSUM\"/" Formula/aermap.rb
          else
            # Add new resource
            RESOURCE_BLOCK="  resource \"aermap_$NEW_VERSION\" do\n    url \"https://github.com/${{ github.repository }}/releases/download/v$TAG_DATE/aermap_$NEW_VERSION.zip\"\n    sha256 \"$CHECKSUM\"\n  end\n"
            sed -i "/# Versioned resources for specific versions/a\\$RESOURCE_BLOCK" Formula/aermap.rb
          fi
          
          # Create versioned formula if it doesn't exist
          if [ ! -f "Formula/aermap@$NEW_VERSION.rb" ]; then
            cp Formula/aermap.rb "Formula/aermap@$NEW_VERSION.rb"
            sed -i "s/class Aermap < Formula/class AermapAT$NEW_VERSION < Formula/" "Formula/aermap@$NEW_VERSION.rb"
          fi
      
      # Update the suite formula
      - name: Update aermod-suite formula
        run: |
          TAG_DATE=$(date +%Y%m%d)
          # CURRENT_YEAR is not strictly needed here if TAG_DATE is YYYYMMDD for the release tag
          FORMULA_PATH="Formula/aermod-suite.rb"

          # Get the latest version of each component
          AERMOD_VERSION="${{ needs.check-for-new-versions.outputs.aermod_update_needed == 'true' && needs.check-for-new-versions.outputs.aermod_new_version || needs.check-for-new-versions.outputs.aermod_current_version }}"
          AERMET_VERSION="${{ needs.check-for-new-versions.outputs.aermet_update_needed == 'true' && needs.check-for-new-versions.outputs.aermet_new_version || needs.check-for-new-versions.outputs.aermet_current_version }}"
          AERMAP_VERSION="${{ needs.check-for-new-versions.outputs.aermap_update_needed == 'true' && needs.check-for-new-versions.outputs.aermap_new_version || needs.check-for-new-versions.outputs.aermap_current_version }}"

          # Create a combined version string for the suite
          if [ "$AERMOD_VERSION" == "$AERMET_VERSION" ] && [ "$AERMET_VERSION" == "$AERMAP_VERSION" ]; then
            SUITE_VERSION="$AERMOD_VERSION"
            echo "All components have the same version: $SUITE_VERSION"
          else
            SUITE_VERSION="${AERMOD_VERSION}-${AERMET_VERSION}-${AERMAP_VERSION}"
            echo "Using combined version string: $SUITE_VERSION"
          fi

          if [ -z "$SUITE_VERSION" ]; then
            echo "Error: SUITE_VERSION is empty. Cannot update formula."
            exit 1
          fi

          SUITE_TARBALL_NAME="aermod-suite-${SUITE_VERSION}.tar.gz"
          # Corrected NEW_URL construction to use v${TAG_DATE}
          NEW_URL="https://github.com/liamswan/homebrew-aermod/releases/download/v${TAG_DATE}/${SUITE_TARBALL_NAME}"

          echo "Updating $FORMULA_PATH with SUITE_VERSION: $SUITE_VERSION and NEW_URL: $NEW_URL"

          # Update version in aermod-suite.rb
          # If version line exists, update it. Otherwise, add it after the homepage line.
          if grep -q '^  version "' "$FORMULA_PATH"; then
            sed -i -E 's/^  version ".*"/  version "'"$SUITE_VERSION"'"/' "$FORMULA_PATH"
          else
            sed -i -E '/^  homepage /a\\  version "'"$SUITE_VERSION"'"' "$FORMULA_PATH"
          fi

          # Update URL in aermod-suite.rb
          # Use a more robust regex for the filename part to handle simple and compound versions.
          # The v[0-9]+ part for the tag is general enough.
          sed -i -E 's|^  url "https://github.com/liamswan/homebrew-aermod/releases/download/v[0-9]+/aermod-suite-[0-9.-]+\\.tar\\.gz"|  url "'"$NEW_URL"'"|' "$FORMULA_PATH"
          
          # Update dependencies to use the latest versions
          # Ensure these sed commands correctly target existing dependency lines, whether versioned or not.
          # If aermod was updated, update its dependency
          if [ "${{ needs.check-for-new-versions.outputs.aermod_update_needed }}" == "true" ] || [ "${{ github.event.inputs.force_run }}" == "true" ]; then
            # Try updating if versioned, then if not versioned
            if grep -q "depends_on \\"aermod@[0-9]*\\"" "$FORMULA_PATH"; then
              sed -i "s/depends_on \\"aermod@[0-9]*\\"/depends_on \\"aermod@$AERMOD_VERSION\\"/" "$FORMULA_PATH"
            elif grep -q "depends_on \\"aermod\\"" "$FORMULA_PATH"; then
              sed -i "s/depends_on \\"aermod\\"/depends_on \\"aermod@$AERMOD_VERSION\\"/" "$FORMULA_PATH"
            else
              echo "No existing aermod dependency found to update in $FORMULA_PATH"
            fi
          fi

          if [ "${{ needs.check-for-new-versions.outputs.aermet_update_needed }}" == "true" ] || [ "${{ github.event.inputs.force_run }}" == "true" ]; then
            if grep -q "depends_on \\"aermet@[0-9]*\\"" "$FORMULA_PATH"; then
              sed -i "s/depends_on \\"aermet@[0-9]*\\"/depends_on \\"aermet@$AERMET_VERSION\\"/" "$FORMULA_PATH"
            elif grep -q "depends_on \\"aermet\\"" "$FORMULA_PATH"; then
              sed -i "s/depends_on \\"aermet\\"/depends_on \\"aermet@$AERMET_VERSION\\"/" "$FORMULA_PATH"
            else
              echo "No existing aermet dependency found to update in $FORMULA_PATH"
            fi
          fi

          if [ "${{ needs.check-for-new-versions.outputs.aermap_update_needed }}" == "true" ] || [ "${{ github.event.inputs.force_run }}" == "true" ]; then
            if grep -q "depends_on \\"aermap@[0-9]*\\"" "$FORMULA_PATH"; then
              sed -i "s/depends_on \\"aermap@[0-9]*\\"/depends_on \\"aermap@$AERMAP_VERSION\\"/" "$FORMULA_PATH"
            elif grep -q "depends_on \\"aermap\\"" "$FORMULA_PATH"; then
              sed -i "s/depends_on \\"aermap\\"/depends_on \\"aermap@$AERMAP_VERSION\\"/" "$FORMULA_PATH"
            else
              echo "No existing aermap dependency found to update in $FORMULA_PATH"
            fi
          fi
          
          # Add a comment to the formula indicating the component versions
          COMPONENT_VERSIONS="# AERMOD Suite with components: AERMOD $AERMOD_VERSION, AERMET $AERMET_VERSION, AERMAP $AERMAP_VERSION"
          if grep -q "# AERMOD Suite with components:" "$FORMULA_PATH"; then
            sed -i "s|# AERMOD Suite with components:.*|$COMPONENT_VERSIONS|" "$FORMULA_PATH"
          else
            # Insert after the class declaration
            sed -i "/class AermodSuite < Formula/a\\  $COMPONENT_VERSIONS" "$FORMULA_PATH"
          fi
      
      # Prepare release assets
      - name: Prepare release assets
        id: prepare-assets
        run: |
          # Create directory for assets and changes
          mkdir -p release_assets
          touch release_assets/changes.md
          
          echo "# Changes in this Release" > release_assets/changes.md
          echo "" >> release_assets/changes.md
          
          TAG_DATE=$(date +%Y%m%d)
          # CURRENT_YEAR definition removed here as it's not essential for tag_date output if TAG_DATE is YYYYMMDD
          echo "tag_date=$TAG_DATE" >> $GITHUB_OUTPUT
          
          # Copy the updated README for release assets
          cp README.md release_assets/README.md
          
          has_packaged_assets=false

          if [ "${{ github.event.inputs.manual_version_check }}" == "true" ]; then
            echo "## Manual Version Update" >> release_assets/changes.md
            echo "This release was triggered with manual version check." >> release_assets/changes.md
            if [ -n "${{ github.event.inputs.aermod_version }}" ]; then
              echo "- AERMOD version manually set to: ${{ github.event.inputs.aermod_version }}" >> release_assets/changes.md
            fi
            if [ -n "${{ github.event.inputs.aermet_version }}" ]; then
              echo "- AERMET version manually set to: ${{ github.event.inputs.aermet_version }}" >> release_assets/changes.md
            fi
            if [ -n "${{ github.event.inputs.aermap_version }}" ]; then
              echo "- AERMAP version manually set to: ${{ github.event.inputs.aermap_version }}" >> release_assets/changes.md
            fi
            echo "" >> release_assets/changes.md
          fi

          # AERMOD
          AERMOD_NEW_VERSION="${{ needs.check-for-new-versions.outputs.aermod_new_version }}"
          if [ "${{ needs.check-for-new-versions.outputs.aermod_update_needed }}" == "true" ]; then
            if [ -f "downloads/aermod_$AERMOD_NEW_VERSION.zip" ] && [ -f "checksums/aermod_$AERMOD_NEW_VERSION.sha256" ]; then
              cp "downloads/aermod_$AERMOD_NEW_VERSION.zip" release_assets/
              cp "checksums/aermod_$AERMOD_NEW_VERSION.sha256" release_assets/
              echo "## AERMOD" >> release_assets/changes.md
              echo "- Updated to version $AERMOD_NEW_VERSION" >> release_assets/changes.md
              echo "- Download URL: https://github.com/${{ github.repository }}/releases/download/v$TAG_DATE/aermod_$AERMOD_NEW_VERSION.zip" >> release_assets/changes.md
              echo "- SHA256: $(cat checksums/aermod_$AERMOD_NEW_VERSION.sha256)" >> release_assets/changes.md
              echo "" >> release_assets/changes.md
              has_packaged_assets=true
            else
              echo "::warning::AERMOD files (downloads/aermod_$AERMOD_NEW_VERSION.zip or checksums/aermod_$AERMOD_NEW_VERSION.sha256) not found for release, though update was needed."
            fi
          fi
          
          # AERMET
          AERMET_NEW_VERSION="${{ needs.check-for-new-versions.outputs.aermet_new_version }}"
          if [ "${{ needs.check-for-new-versions.outputs.aermet_update_needed }}" == "true" ]; then
            if [ -f "downloads/aermet_$AERMET_NEW_VERSION.zip" ] && [ -f "checksums/aermet_$AERMET_NEW_VERSION.sha256" ]; then
              cp "downloads/aermet_$AERMET_NEW_VERSION.zip" release_assets/
              cp "checksums/aermet_$AERMET_NEW_VERSION.sha256" release_assets/
              echo "## AERMET" >> release_assets/changes.md
              echo "- Updated to version $AERMET_NEW_VERSION" >> release_assets/changes.md
              echo "- Download URL: https://github.com/${{ github.repository }}/releases/download/v$TAG_DATE/aermet_$AERMET_NEW_VERSION.zip" >> release_assets/changes.md
              echo "- SHA256: $(cat checksums/aermet_$AERMET_NEW_VERSION.sha256)" >> release_assets/changes.md
              echo "" >> release_assets/changes.md
              has_packaged_assets=true
            else
              echo "::warning::AERMET files (downloads/aermet_$AERMET_NEW_VERSION.zip or checksums/aermet_$AERMET_NEW_VERSION.sha256) not found for release, though update was needed."
            fi
          fi

          # AERMAP
          AERMAP_NEW_VERSION="${{ needs.check-for-new-versions.outputs.aermap_new_version }}"
          if [ "${{ needs.check-for-new-versions.outputs.aermap_update_needed }}" == "true" ]; then
            if [ -f "downloads/aermap_$AERMAP_NEW_VERSION.zip" ] && [ -f "checksums/aermap_$AERMAP_NEW_VERSION.sha256" ]; then
              cp "downloads/aermap_$AERMAP_NEW_VERSION.zip" release_assets/
              cp "checksums/aermap_$AERMAP_NEW_VERSION.sha256" release_assets/
              echo "## AERMAP" >> release_assets/changes.md
              echo "- Updated to version $AERMAP_NEW_VERSION" >> release_assets/changes.md
              echo "- Download URL: https://github.com/${{ github.repository }}/releases/download/v$TAG_DATE/aermap_$AERMAP_NEW_VERSION.zip" >> release_assets/changes.md
              echo "- SHA256: $(cat checksums/aermap_$AERMAP_NEW_VERSION.sha256)" >> release_assets/changes.md
              echo "" >> release_assets/changes.md
              has_packaged_assets=true
            else
              echo "::warning::AERMAP files (downloads/aermap_$AERMAP_NEW_VERSION.zip or checksums/aermap_$AERMAP_NEW_VERSION.sha256) not found for release, though update was needed."
            fi
          fi
          
          echo "## Documentation" >> release_assets/changes.md
          echo "- Updated README.md with latest version information (committed separately if changes occurred)." >> release_assets/changes.md
          echo "- Current versions reflected in this release package:" >> release_assets/changes.md
          
          FINAL_AERMOD_VERSION="${{ needs.check-for-new-versions.outputs.aermod_new_version || needs.check-for-new-versions.outputs.aermod_current_version }}"
          FINAL_AERMET_VERSION="${{ needs.check-for-new-versions.outputs.aermet_new_version || needs.check-for-new-versions.outputs.aermet_current_version }}"
          FINAL_AERMAP_VERSION="${{ needs.check-for-new-versions.outputs.aermap_new_version || needs.check-for-new-versions.outputs.aermap_current_version }}"

          echo "  - AERMOD: $FINAL_AERMOD_VERSION" >> release_assets/changes.md
          echo "  - AERMET: $FINAL_AERMET_VERSION" >> release_assets/changes.md
          echo "  - AERMAP: $FINAL_AERMAP_VERSION" >> release_assets/changes.md
          
          if [ "$FINAL_AERMOD_VERSION" == "$FINAL_AERMET_VERSION" ] && [ "$FINAL_AERMET_VERSION" == "$FINAL_AERMAP_VERSION" ]; then
            SUITE_VERSION="$FINAL_AERMOD_VERSION"
          else
            SUITE_VERSION="${FINAL_AERMOD_VERSION}-${FINAL_AERMET_VERSION}-${FINAL_AERMAP_VERSION}"
          fi
          echo "  - AERMOD-Suite: $SUITE_VERSION (formula version)" >> release_assets/changes.md

          # Create the empty tarball for aermod-suite
          if [ -n "$SUITE_VERSION" ]; then
            SUITE_TARBALL_NAME="aermod-suite-${SUITE_VERSION}.tar.gz"
            echo "Creating empty tarball: release_assets/$SUITE_TARBALL_NAME"
            tar czf "release_assets/$SUITE_TARBALL_NAME" --files-from /dev/null
            # Ensure this asset is included in the release if it's created
            if [ -f "release_assets/$SUITE_TARBALL_NAME" ]; then
              has_packaged_assets=true # Assuming this variable is used to decide if release happens
            fi
          else
            echo "Warning: SUITE_VERSION is empty, cannot create suite tarball."
          fi
          
          echo "has_updates=$has_packaged_assets" >> $GITHUB_OUTPUT
          
          echo "Files prepared for release:"
          ls -la release_assets

      # Check if a release with this tag already exists
      - name: Check for existing release
        id: check-release
        if: steps.prepare-assets.outputs.has_updates == 'true'
        run: |
          TAG_DATE="${{ steps.prepare-assets.outputs.tag_date }}"
          if gh release view v$TAG_DATE &> /dev/null; then
            echo "::warning::Release v$TAG_DATE already exists. Will update it with new assets."
            echo "release_exists=true" >> $GITHUB_OUTPUT
          else
            echo "No existing release found for tag v$TAG_DATE."
            echo "release_exists=false" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      # Delete existing release if found (optional, only needed if we want to completely recreate)
      - name: Delete existing release
        if: steps.prepare-assets.outputs.has_updates == 'true' && steps.check-release.outputs.release_exists == 'true'
        run: |
          TAG_DATE="${{ steps.prepare-assets.outputs.tag_date }}"
          echo "Deleting existing release v$TAG_DATE to ensure clean state..."
          gh release delete v$TAG_DATE --yes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Create GitHub release with appropriate files
      - name: Create GitHub Release
        id: create-release
        if: steps.prepare-assets.outputs.has_updates == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.prepare-assets.outputs.tag_date }}
          name: AERMOD Suite Update - ${{ steps.prepare-assets.outputs.tag_date }}
          body_path: release_assets/changes.md
          files: release_assets/*
          draft: false
          prerelease: false
          fail_on_unmatched_files: true
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      # Comprehensive verification of release assets
      - name: Verify Release Assets
        if: steps.prepare-assets.outputs.has_updates == 'true'
        run: |
          # Wait a bit for the release to be processed
          sleep 10
          
          TAG_DATE="${{ steps.prepare-assets.outputs.tag_date }}"
          echo "Verifying release assets for v$TAG_DATE..."
          
          # Get the list of assets that should exist based on what was updated
          declare -a EXPECTED_ASSETS=()
          
          # Add README to expected assets
          EXPECTED_ASSETS+=("README.md")
          
          # Add component assets if they were updated
          if [ "${{ needs.check-for-new-versions.outputs.aermod_update_needed }}" == "true" ]; then
            EXPECTED_ASSETS+=("aermod_${{ needs.check-for-new-versions.outputs.aermod_new_version }}.zip")
            EXPECTED_ASSETS+=("aermod_${{ needs.check-for-new-versions.outputs.aermod_new_version }}.sha256")
          fi
          
          if [ "${{ needs.check-for-new-versions.outputs.aermet_update_needed }}" == "true" ]; then
            EXPECTED_ASSETS+=("aermet_${{ needs.check-for-new-versions.outputs.aermet_new_version }}.zip")
            EXPECTED_ASSETS+=("aermet_${{ needs.check-for-new-versions.outputs.aermet_new_version }}.sha256")
          fi
          
          if [ "${{ needs.check-for-new-versions.outputs.aermap_update_needed }}" == "true" ]; then
            EXPECTED_ASSETS+=("aermap_${{ needs.check-for-new-versions.outputs.aermap_new_version }}.zip")
            EXPECTED_ASSETS+=("aermap_${{ needs.check-for-new-versions.outputs.aermap_new_version }}.sha256")
          fi
          
          # Get the actual assets from the release
          ACTUAL_ASSETS=$(gh release view v$TAG_DATE --json assets -q '.assets[].name')
          
          # Print expected and actual assets for debugging
          echo "Expected assets:"
          printf "  %s\n" "${EXPECTED_ASSETS[@]}"
          
          echo "Actual assets:"
          echo "$ACTUAL_ASSETS" | tr ' ' '\n' | sed 's/^/  /'
          
          # Check that all expected assets exist
          MISSING_ASSETS=0
          for asset in "${EXPECTED_ASSETS[@]}"; do
            if ! echo "$ACTUAL_ASSETS" | grep -q "$asset"; then
              echo "::error::Missing expected asset: $asset"
              MISSING_ASSETS=$((MISSING_ASSETS + 1))
            else
              echo "✅ Found asset: $asset"
            fi
          done
          
          # Fail if any assets are missing
          if [ "$MISSING_ASSETS" -gt 0 ]; then
            echo "::error::$MISSING_ASSETS expected assets are missing from the release"
            exit 1
          else
            echo "✅ All expected assets are present in the release"
          fi
          
          # Verify the URLs work
          echo "Verifying asset URLs..."
          for asset in "${EXPECTED_ASSETS[@]}"; do
            URL="https://github.com/${{ github.repository }}/releases/download/v$TAG_DATE/$asset"
            echo "Checking URL: $URL"
            
            # Use curl to check the URL exists (follow redirects, only get headers)
            if curl -s -f -L -I "$URL" > /dev/null; then
              echo "✅ URL accessible: $URL"
            else
              echo "::error::URL not accessible: $URL"
              exit 1
            fi
          done
          
          echo "✅ All release assets verified successfully"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  audit-and-style-fix:
    name: Audit and fix formula style
    needs: [check-for-new-versions, update-formulas]
    # Run if formulas were updated or if force_run is true
    if: always() && (needs.check-for-new-versions.outputs.any_updates == 'true' || github.event.inputs.force_run == 'true')
    runs-on: macos-latest
    steps:
      - name: Set up Homebrew
        id: set-up-homebrew
        uses: Homebrew/actions/setup-homebrew@master
      
      - name: Set up Homebrew tap
        run: |
          brew tap --force-auto-update liamswan/homebrew-aermod https://github.com/liamswan/homebrew-aermod
      
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }} # Ensure we checkout the correct branch
      
      - name: Add tap for formula audit and style
        run: |
          brew tap liamswan/homebrew-aermod "$(pwd)"
          brew update
      
      - name: Run brew audit
        id: audit
        run: |
          echo "Running brew audit on all formulas..."
          
          # Create a report file
          touch formula_audit_report.md
          echo "# Formula Audit Report" > formula_audit_report.md
          echo "Generated on $(date)" >> formula_audit_report.md
          echo "" >> formula_audit_report.md
          
          # Audit all formulas by name instead of path
          FORMULAS=$(find Formula -name "*.rb" -exec basename {} .rb \;)
          ALL_PASS=true
          
          for formula_name in $FORMULAS; do
            echo "## Auditing: $formula_name" >> formula_audit_report.md
            if brew audit "$formula_name" --strict --online --new; then
              echo "✅ $formula_name: Passed" >> formula_audit_report.md
            else
              echo "⚠️ $formula_name: Failed or has warnings" >> formula_audit_report.md
              brew audit "$formula_name" --strict --online --new >> formula_audit_report.md 2>&1
              ALL_PASS=false
            fi
            echo "" >> formula_audit_report.md
          done
          
          if [ "$ALL_PASS" = true ]; then
            echo "All formulas passed audit!"
          else
            echo "Some formulas have audit warnings. See report for details."
            # exit 1 # Optionally fail the step if audits don't pass
          fi
      
      - name: Fix formula style
        id: style_fix
        run: |
          echo "Running brew style --fix on all formulas..."
          
          # Create a report file
          touch formula_style_fix_report.md
          echo "# Formula Style Fix Report" > formula_style_fix_report.md
          echo "Generated on $(date)" >> formula_style_fix_report.md
          echo "" >> formula_style_fix_report.md
          
          # Fix style for all formulas by name instead of path
          FORMULAS=$(find Formula -name "*.rb" -exec basename {} .rb \;)
          ANY_CHANGES=false
          
          for formula_name in $FORMULAS; do
            echo "## Styling: $formula_name" >> formula_style_fix_report.md
            # Run brew style --fix on the formula name, not the path
            if brew style --fix "$formula_name"; then
              echo "✅ $formula_name: Style corrected or already good." >> formula_style_fix_report.md
            else
              # Even if it fails, it might have made some changes.
              # The command exits with non-zero if it makes changes.
              echo "ℹ️ $formula_name: Style command executed. Check diff for changes." >> formula_style_fix_report.md
            fi
            # Check if git status shows changes for this file
            if ! git diff --quiet "Formula/$formula_name.rb"; then
              ANY_CHANGES=true
            fi
            echo "" >> formula_style_fix_report.md
          done
          
          if [ "$ANY_CHANGES" = true ]; then
            echo "Style fixes were applied to some formulas."
            echo "style_changes_made=true" >> $GITHUB_OUTPUT
          else
            echo "No style changes needed or applied."
            echo "style_changes_made=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Check for changes to commit
        id: check_style_changes
        run: |
          # Add Formula directory to staging to capture any style fixes
          git add Formula/*.rb
          # Check if there are changes staged for commit
          if git diff --staged --quiet; then
            echo "No style changes to commit."
            echo "no_style_changes=true" >> $GITHUB_OUTPUT
          else
            echo "Style changes detected, will commit."
            echo "no_style_changes=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Commit style changes
        if: steps.check_style_changes.outputs.no_style_changes == 'false'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          git commit -m "Apply brew style fixes [automated]"
          git push || echo "::warning::Failed to push changes, but continuing with workflow"
      
      - name: Check existence of report files
        id: check_report_files
        run: |
          # Check if report files exist and create empty ones if they don't
          if [ ! -f formula_audit_report.md ]; then
            echo "::warning::formula_audit_report.md is missing. Creating an empty file."
            touch formula_audit_report.md
            echo "# Formula Audit Report" > formula_audit_report.md
            echo "No audit data was generated in this run." >> formula_audit_report.md
          fi
          
          if [ ! -f formula_fix_report.md ]; then
            echo "::warning::formula_fix_report.md is missing. Creating an empty file."
            touch formula_fix_report.md
            echo "# Formula Style Fix Report" > formula_fix_report.md
            echo "No style fix data was generated in this run." >> formula_fix_report.md
          fi
      
      - name: Upload audit and style reports
        uses: actions/upload-artifact@v4
        with:
          name: formula-reports
          path: |
            formula_audit_report.md
            formula_fix_report.md
          retention-days: 14

  test-aermod:
    name: Install and test AERMOD
    needs: [check-for-new-versions, update-formulas, audit-and-style-fix]
    if: (needs.check-for-new-versions.outputs.aermod_update_needed == 'true' || github.event.inputs.force_run == 'true') && always()
    runs-on: macos-latest
    steps:
      - name: Set up Homebrew
        id: set-up-homebrew
        uses: Homebrew/actions/setup-homebrew@master
      
      - name: Set up Homebrew tap
        run: |
          brew tap --force-auto-update liamswan/homebrew-aermod https://github.com/liamswan/homebrew-aermod
      
      - name: Add tap
        run: |
          brew tap liamswan/homebrew-aermod
          brew update # Ensure the tap is up-to-date
      
      - name: Install and test AERMOD
        continue-on-error: true
        run: |
          echo "Attempting to install AERMOD..."
          if brew install aermod; then
            echo "AERMOD installed successfully."
          else
            echo "Failed to install AERMOD."
            exit 1
          fi
          echo "Attempting to test AERMOD..."
          if brew test aermod; then
            echo "AERMOD tested successfully."
          else
            echo "Failed to test AERMOD."
          fi
          echo "Checking linkage for AERMOD..."
          if brew linkage --test aermod; then
            echo "AERMOD linkage check passed."
          else
            echo "AERMOD linkage check failed."
          fi

      # Create success comment
      - name: Create success notification
        if: success()
        run: |
          echo "✅ Successfully installed and tested AERMOD"
          echo ""
          if [ "${{ needs.check-for-new-versions.outputs.aermod_update_needed }}" == "true" ]; then
            echo "Updated AERMOD: ${{ needs.check-for-new-versions.outputs.aermod_current_version }} -> ${{ needs.check-for-new-versions.outputs.aermod_new_version }}"
          else
            echo "Tested current AERMOD version: ${{ needs.check-for-new-versions.outputs.aermod_current_version }}"
          fi

  test-aermet:
    name: Install and test AERMET
    needs: [check-for-new-versions, update-formulas, audit-and-style-fix]
    if: (needs.check-for-new-versions.outputs.aermet_update_needed == 'true' || github.event.inputs.force_run == 'true') && always()
    runs-on: macos-latest
    steps:
      - name: Set up Homebrew
        id: set-up-homebrew
        uses: Homebrew/actions/setup-homebrew@master
      
      - name: Set up Homebrew tap
        run: |
          brew tap --force-auto-update liamswan/homebrew-aermod https://github.com/liamswan/homebrew-aermod
      
      - name: Add tap
        run: |
          brew tap liamswan/homebrew-aermod
          brew update # Ensure the tap is up-to-date
      
      - name: Install and test AERMET
        continue-on-error: true
        run: |
          echo "Attempting to install AERMET..."
          if brew install aermet; then
            echo "AERMET installed successfully."
          else
            echo "Failed to install AERMET."
            exit 1
          fi
          echo "Attempting to test AERMET..."
          if brew test aermet; then
            echo "AERMET tested successfully."
          else
            echo "Failed to test AERMET."
          fi
          echo "Checking linkage for AERMET..."
          if brew linkage --test aermet; then
            echo "AERMET linkage check passed."
          else
            echo "AERMET linkage check failed."
          fi

      # Create success comment
      - name: Create success notification
        if: success()
        run: |
          echo "✅ Successfully installed and tested AERMET"
          echo ""
          if [ "${{ needs.check-for-new-versions.outputs.aermet_update_needed }}" == "true" ]; then
            echo "Updated AERMET: ${{ needs.check-for-new-versions.outputs.aermet_current_version }} -> ${{ needs.check-for-new-versions.outputs.aermet_new_version }}"
          else
            echo "Tested current AERMET version: ${{ needs.check-for-new-versions.outputs.aermet_current_version }}"
          fi

  test-aermap:
    name: Install and test AERMAP
    needs: [check-for-new-versions, update-formulas, audit-and-style-fix]
    if: (needs.check-for-new-versions.outputs.aermap_update_needed == 'true' || github.event.inputs.force_run == 'true') && always()
    runs-on: macos-latest
    steps:
      - name: Set up Homebrew
        id: set-up-homebrew
        uses: Homebrew/actions/setup-homebrew@master
      
      - name: Set up Homebrew tap
        run: |
          brew tap --force-auto-update liamswan/homebrew-aermod https://github.com/liamswan/homebrew-aermod
      
      - name: Add tap
        run: |
          brew tap liamswan/homebrew-aermod
          brew update # Ensure the tap is up-to-date
      
      - name: Install and test AERMAP
        continue-on-error: true
        run: |
          echo "Attempting to install AERMAP..."
          if brew install aermap; then
            echo "AERMAP installed successfully."
          else
            echo "Failed to install AERMAP."
            exit 1
          fi
          echo "Attempting to test AERMAP..."
          if brew test aermap; then
            echo "AERMAP tested successfully."
          else
            echo "Failed to test AERMAP."
          fi
          echo "Checking linkage for AERMAP..."
          if brew linkage --test aermap; then
            echo "AERMAP linkage check passed."
          else
            echo "AERMAP linkage check failed."
          fi

      # Create success comment
      - name: Create success notification
        if: success()
        run: |
          echo "✅ Successfully installed and tested AERMAP"
          echo ""
          if [ "${{ needs.check-for-new-versions.outputs.aermap_update_needed }}" == "true" ]; then
            echo "Updated AERMAP: ${{ needs.check-for-new-versions.outputs.aermap_current_version }} -> ${{ needs.check-for-new-versions.outputs.aermap_new_version }}"
          else
            echo "Tested current AERMAP version: ${{ needs.check-for-new-versions.outputs.aermap_current_version }}"
          fi

  test-aermod-suite:
    name: Install and test AERMOD Suite
    needs: [check-for-new-versions, update-formulas, audit-and-style-fix]
    # Always run when force_run is true, or if any component has been updated
    if: (github.event.inputs.force_run == 'true' || needs.check-for-new-versions.outputs.any_updates == 'true') && always()
    runs-on: macos-latest
    steps:
      - name: Set up Homebrew
        id: set-up-homebrew
        uses: Homebrew/actions/setup-homebrew@master
      
      - name: Set up Homebrew tap
        run: |
          brew tap --force-auto-update liamswan/homebrew-aermod https://github.com/liamswan/homebrew-aermod
      
      - name: Add tap
        run: |
          brew tap liamswan/homebrew-aermod
          brew update # Ensure the tap is up-to-date
      
      - name: Install and test AERMOD Suite
        run: |
          # Ensure the tap is correctly set up before testing
          brew update > /dev/null # Suppress verbose output unless debugging
          brew doctor || true # Run doctor but don't fail the job if it has warnings
          
          echo "Attempting to install aermod-suite..."
          if brew install --verbose --debug liamswan/homebrew-aermod/aermod-suite; then
            echo "aermod-suite installed successfully."
          else
            echo "Failed to install aermod-suite."
            # Attempt to gather more info if install fails
            echo "--- Formula Info ---"
            brew info liamswan/homebrew-aermod/aermod-suite
            echo "--- Trying to fetch formula directly ---"
            brew fetch --force liamswan/homebrew-aermod/aermod-suite || echo "Fetch also failed"
            exit 1
          fi
          
          echo "Testing aermod-suite..."
          if brew test liamswan/homebrew-aermod/aermod-suite; then
            echo "aermod-suite tests passed."
          else
            echo "Failed to test aermod-suite."
            exit 1
          fi

      # Create success comment
      - name: Create success notification
        if: success()
        run: |
          echo "✅ Successfully installed and tested AERMOD Suite"
          echo ""
          echo "Components:"
          echo "- AERMOD: ${{ needs.check-for-new-versions.outputs.aermod_new_version || needs.check-for-new-versions.outputs.aermod_current_version }}"
          echo "- AERMET: ${{ needs.check-for-new-versions.outputs.aermet_new_version || needs.check-for-new-versions.outputs.aermet_current_version }}"
          echo "- AERMAP: ${{ needs.check-for-new-versions.outputs.aermap_new_version || needs.check-for-new-versions.outputs.aermap_current_version }}"
          
          # Calculate suite version
          AERMOD_VERSION="${{ needs.check-for-new-versions.outputs.aermod_new_version || needs.check-for-new-versions.outputs.aermod_current_version }}"
          AERMET_VERSION="${{ needs.check-for-new-versions.outputs.aermet_new_version || needs.check-for-new-versions.outputs.aermet_current_version }}"
          AERMAP_VERSION="${{ needs.check-for-new-versions.outputs.aermap_new_version || needs.check-for-new-versions.outputs.aermap_current_version }}"
          
          if [ "$AERMOD_VERSION" == "$AERMET_VERSION" ] && [ "$AERMET_VERSION" == "$AERMAP_VERSION" ]; then
            SUITE_VERSION="$AERMOD_VERSION"
          else
            SUITE_VERSION="${AERMOD_VERSION}-${AERMET_VERSION}-${AERMAP_VERSION}"
          fi
          
          echo "AERMOD Suite version: $SUITE_VERSION"

  create-issue-on-failure:
    name: Create Issue on Failure
    needs: [check-for-new-versions, update-formulas, test-aermod, test-aermet, test-aermap, test-aermod-suite, audit-and-style-fix]
    if: failure() && (needs.check-for-new-versions.outputs.any_updates == 'true' || github.event.inputs.force_run == 'true')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Prepare issue content
        id: prepare-issue
        run: |
          echo "### ⚠️ AERMOD Suite Update Workflow Failed" > ./workflow_failure_issue.md
          echo "" >> ./workflow_failure_issue.md
          echo "The automated weekly update and testing workflow for the AERMOD Suite Homebrew formulas has failed." >> ./workflow_failure_issue.md
          echo "" >> ./workflow_failure_issue.md
          echo "**Details:**" >> ./workflow_failure_issue.md
          echo "- **Trigger:** ${{ github.event_name }}" >> ./workflow_failure_issue.md
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "- **Force Run:** ${{ github.event.inputs.force_run }}" >> ./workflow_failure_issue.md
          fi
          echo "- **Run ID:** ${{ github.run_id }}" >> ./workflow_failure_issue.md
          echo "- **Run Attempt:** ${{ github.run_attempt }}" >> ./workflow_failure_issue.md
          echo "- **Link to Run:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" >> ./workflow_failure_issue.md
          echo "" >> ./workflow_failure_issue.md
          echo "**Failed Job(s):**" >> ./workflow_failure_issue.md
          if [ "${{ needs.check-for-new-versions.result }}" == "failure" ]; then
            echo "  - check-for-new-versions" >> ./workflow_failure_issue.md
          fi
          if [ "${{ needs.update-formulas.result }}" == "failure" ]; then
            echo "  - update-formulas" >> ./workflow_failure_issue.md
          fi
          if [ "${{ needs.test-aermod.result }}" == "failure" ]; then
            echo "  - test-aermod" >> ./workflow_failure_issue.md
          fi
          if [ "${{ needs.test-aermet.result }}" == "failure" ]; then
            echo "  - test-aermet" >> ./workflow_failure_issue.md
          fi
          if [ "${{ needs.test-aermap.result }}" == "failure" ]; then
            echo "  - test-aermap" >> ./workflow_failure_issue.md
          fi
          if [ "${{ needs.test-aermod-suite.result }}" == "failure" ]; then
            echo "  - test-aermod-suite" >> ./workflow_failure_issue.md
          fi
          if [ "${{ needs.audit-and-style-fix.result }}" == "failure" ]; then
            echo "  - audit-and-style-fix" >> ./workflow_failure_issue.md
          fi
          echo "" >> ./workflow_failure_issue.md
          echo "Please investigate the workflow logs for more details." >> ./workflow_failure_issue.md

      - name: Create Issue from File
        uses: peter-evans/create-issue-from-file@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          title: "AERMOD Suite Update Workflow Failed (${{ github.run_id }})"
          content-filepath: ./workflow_failure_issue.md # Corrected to content-filepath
          labels: bug, automation, workflow-failure
          assignees: liamswan

  test-summary:
    name: Test Summary
    needs: [test-aermod, test-aermet, test-aermap, test-aermod-suite]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Create test summary
        run: |
          echo "# AERMOD Suite Testing Summary"
          echo ""
          echo "## Test Results"
          echo ""
          
          if [ "${{ needs.test-aermod.result }}" == "success" ]; then
            echo "✅ AERMOD: Passed"
          elif [ "${{ needs.test-aermod.result }}" == "skipped" ]; then
            echo "⏭️ AERMOD: Skipped"
          else
            echo "❌ AERMOD: Failed"
          fi
          
          if [ "${{ needs.test-aermet.result }}" == "success" ]; then
            echo "✅ AERMET: Passed"
          elif [ "${{ needs.test-aermet.result }}" == "skipped" ]; then
            echo "⏭️ AERMET: Skipped"
          else
            echo "❌ AERMET: Failed"
          fi
          
          if [ "${{ needs.test-aermap.result }}" == "success" ]; then
            echo "✅ AERMAP: Passed"
          elif [ "${{ needs.test-aermap.result }}" == "skipped" ]; then
            echo "⏭️ AERMAP: Skipped"
          else
            echo "❌ AERMAP: Failed"
          fi
          
          if [ "${{ needs.test-aermod-suite.result }}" == "success" ]; then
            echo "✅ AERMOD Suite: Passed"
          elif [ "${{ needs.test-aermod-suite.result }}" == "skipped" ]; then
            echo "⏭️ AERMOD Suite: Skipped"
          else
            echo "❌ AERMOD Suite: Failed"
          fi
          
          echo ""
          echo "For more details, please check the individual job logs."
          
          # Overall status
          if [ "${{ needs.test-aermod.result }}" == "success" ] || [ "${{ needs.test-aermet.result }}" == "success" ] || [ "${{ needs.test-aermap.result }}" == "success" ]; then
            echo ""
            echo "At least one component passed testing. The formulas should be available for installation."
          fi
