name: Weekly AERMOD Suite Version Check

on:
  schedule:
    # Run weekly on Monday at 1:00 AM UTC
    - cron: '0 1 * * 1'
  workflow_dispatch:
    inputs:
      force_run:
        description: 'Force run update and test jobs even if no new versions are found'
        required: false
        default: false # Ensure default is a boolean
        type: boolean
      manual_version_check:
        description: 'Override automatic version check and force specific version numbers'
        required: false
        default: false
        type: boolean
      aermod_version:
        description: 'Manual AERMOD version (only used if manual_version_check is true)'
        required: false
        type: string
      aermet_version:
        description: 'Manual AERMET version (only used if manual_version_check is true)'
        required: false
        type: string
      aermap_version:
        description: 'Manual AERMAP version (only used if manual_version_check is true)'
        required: false
        type: string

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  check-for-new-versions:
    name: Check for new versions
    runs-on: ubuntu-latest
    outputs:
      aermod_new_version: ${{ steps.aermod-check.outputs.new_version }}
      aermod_current_version: ${{ steps.aermod-check.outputs.current_version }}
      aermod_update_needed: ${{ steps.aermod-check.outputs.update_needed }}
      
      aermet_new_version: ${{ steps.aermet-check.outputs.new_version }}
      aermet_current_version: ${{ steps.aermet-check.outputs.current_version }}
      aermet_update_needed: ${{ steps.aermet-check.outputs.update_needed }}
      
      aermap_new_version: ${{ steps.aermap-check.outputs.new_version }}
      aermap_current_version: ${{ steps.aermap-check.outputs.current_version }}
      aermap_update_needed: ${{ steps.aermap-check.outputs.update_needed }}
      
      any_updates: ${{ steps.check-any-updates.outputs.any_updates }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Check AERMOD versions
        id: aermod-check
        run: |
          # Get current version from formula
          CURRENT_VERSION=$(grep -o 'version "[0-9]*"' Formula/aermod.rb | grep -o '[0-9]*')
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          
          # Check if we should use manual version
          if [ "${{ github.event.inputs.manual_version_check }}" == "true" ] && [ -n "${{ github.event.inputs.aermod_version }}" ]; then
            LATEST_VERSION="${{ github.event.inputs.aermod_version }}"
            echo "Using manually provided AERMOD version: $LATEST_VERSION"
          else
            # Get latest version from EPA website
            LATEST_VERSION=$(bash scripts/fetch_latest_aermod.sh --version-only || echo "")
          fi
          
          # If version retrieval failed, use the current version to avoid failures
          if [ -z "$LATEST_VERSION" ]; then
            echo "::warning::Failed to retrieve latest AERMOD version, using current version instead"
            LATEST_VERSION=$CURRENT_VERSION
            echo "new_version=$LATEST_VERSION" >> $GITHUB_OUTPUT
            echo "update_needed=false" >> $GITHUB_OUTPUT
            echo "No new AERMOD version check performed due to EPA website issues. Current version: $CURRENT_VERSION"
          else
            echo "new_version=$LATEST_VERSION" >> $GITHUB_OUTPUT
            
            # Compare versions
            if [ "$CURRENT_VERSION" != "$LATEST_VERSION" ] || [ "${{ github.event.inputs.manual_version_check }}" == "true" ]; then
              echo "update_needed=true" >> $GITHUB_OUTPUT
              echo "New AERMOD version detected: $LATEST_VERSION (current: $CURRENT_VERSION)"
            else
              echo "update_needed=false" >> $GITHUB_OUTPUT
              echo "No new AERMOD version available. Current version: $CURRENT_VERSION"
            fi
          fi
      
      - name: Check AERMET versions
        id: aermet-check
        run: |
          # Get current version from formula
          CURRENT_VERSION=$(grep -o 'version "[0-9]*"' Formula/aermet.rb | grep -o '[0-9]*')
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          
          # Check if we should use manual version
          if [ "${{ github.event.inputs.manual_version_check }}" == "true" ] && [ -n "${{ github.event.inputs.aermet_version }}" ]; then
            LATEST_VERSION="${{ github.event.inputs.aermet_version }}"
            echo "Using manually provided AERMET version: $LATEST_VERSION"
          else
            # Get latest version from EPA website
            LATEST_VERSION=$(bash scripts/fetch_latest_aermet.sh --version-only || echo "")
          fi
          
          # If version retrieval failed, use the current version to avoid failures
          if [ -z "$LATEST_VERSION" ]; then
            echo "::warning::Failed to retrieve latest AERMET version, using current version instead"
            LATEST_VERSION=$CURRENT_VERSION
            echo "new_version=$LATEST_VERSION" >> $GITHUB_OUTPUT
            echo "update_needed=false" >> $GITHUB_OUTPUT
            echo "No new AERMET version check performed due to EPA website issues. Current version: $CURRENT_VERSION"
          else
            echo "new_version=$LATEST_VERSION" >> $GITHUB_OUTPUT
            
            # Compare versions
            if [ "$CURRENT_VERSION" != "$LATEST_VERSION" ] || [ "${{ github.event.inputs.manual_version_check }}" == "true" ]; then
              echo "update_needed=true" >> $GITHUB_OUTPUT
              echo "New AERMET version detected: $LATEST_VERSION (current: $CURRENT_VERSION)"
            else
              echo "update_needed=false" >> $GITHUB_OUTPUT
              echo "No new AERMET version available. Current version: $CURRENT_VERSION"
            fi
          fi
      
      - name: Check AERMAP versions
        id: aermap-check
        run: |
          # Get current version from formula
          CURRENT_VERSION=$(grep -o 'version "[0-9]*"' Formula/aermap.rb | grep -o '[0-9]*')
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          
          # Check if we should use manual version
          if [ "${{ github.event.inputs.manual_version_check }}" == "true" ] && [ -n "${{ github.event.inputs.aermap_version }}" ]; then
            LATEST_VERSION="${{ github.event.inputs.aermap_version }}"
            echo "Using manually provided AERMAP version: $LATEST_VERSION"
          else
            # Get latest version from EPA website
            LATEST_VERSION=$(bash scripts/fetch_latest_aermap.sh --version-only || echo "")
          fi
          
          # If version retrieval failed, use the current version to avoid failures
          if [ -z "$LATEST_VERSION" ]; then
            echo "::warning::Failed to retrieve latest AERMAP version, using current version instead"
            LATEST_VERSION=$CURRENT_VERSION
            echo "new_version=$LATEST_VERSION" >> $GITHUB_OUTPUT
            echo "update_needed=false" >> $GITHUB_OUTPUT
            echo "No new AERMAP version check performed due to EPA website issues. Current version: $CURRENT_VERSION"
          else
            echo "new_version=$LATEST_VERSION" >> $GITHUB_OUTPUT
            
            # Compare versions
            if [ "$CURRENT_VERSION" != "$LATEST_VERSION" ] || [ "${{ github.event.inputs.manual_version_check }}" == "true" ]; then
              echo "update_needed=true" >> $GITHUB_OUTPUT
              echo "New AERMAP version detected: $LATEST_VERSION (current: $CURRENT_VERSION)"
            else
              echo "update_needed=false" >> $GITHUB_OUTPUT
              echo "No new AERMAP version available. Current version: $CURRENT_VERSION"
            fi
          fi
      
      - name: Check if any updates are needed
        id: check-any-updates
        run: |
          if [ "${{ steps.aermod-check.outputs.update_needed }}" == "true" ] || 
             [ "${{ steps.aermet-check.outputs.update_needed }}" == "true" ] || 
             [ "${{ steps.aermap-check.outputs.update_needed }}" == "true" ]; then
            echo "any_updates=true" >> $GITHUB_OUTPUT
            echo "Updates are needed for at least one component"
          else
            echo "any_updates=false" >> $GITHUB_OUTPUT
            echo "No updates needed for any component"
          fi

  update-formulas:
    name: Update formulas with new versions
    needs: check-for-new-versions
    # Run if any component has an update OR if force_run is explicitly true
    if: needs.check-for-new-versions.outputs.any_updates == 'true' || github.event.inputs.force_run == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      # Download and update AERMOD if needed
      - name: Download new AERMOD version
        # This step only runs if an update for AERMOD is actually needed
        if: needs.check-for-new-versions.outputs.aermod_update_needed == 'true'
        id: download-aermod
        run: |
          # Create downloads and checksums directories if they don't exist
          mkdir -p downloads checksums
          
          echo "Downloading AERMOD version ${{ needs.check-for-new-versions.outputs.aermod_new_version }}..."
          if bash scripts/fetch_latest_aermod.sh "${{ needs.check-for-new-versions.outputs.aermod_new_version }}"; then
            # Validate the downloaded file
            if [ -f "downloads/aermod_${{ needs.check-for-new-versions.outputs.aermod_new_version }}.zip" ]; then
              file_size=$(stat -c%s "downloads/aermod_${{ needs.check-for-new-versions.outputs.aermod_new_version }}.zip" || echo "0")
              if [ "$file_size" -gt "1000" ]; then
                echo "download_success=true" >> $GITHUB_OUTPUT
                echo "Downloaded AERMOD successfully ($(($file_size/1024))KB)"
              else
                echo "::error::Downloaded AERMOD file is too small (${file_size} bytes)"
                echo "download_success=false" >> $GITHUB_OUTPUT
              fi
            else
              echo "::error::AERMOD download file not found"
              echo "download_success=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "::warning::Failed to download AERMOD ${{ needs.check-for-new-versions.outputs.aermod_new_version }}"
            echo "download_success=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Extract AERMOD checksum
        if: needs.check-for-new-versions.outputs.aermod_update_needed == 'true' && steps.download-aermod.outputs.download_success == 'true'
        id: extract-aermod-checksum
        run: |
          if [ -f "checksums/aermod_${{ needs.check-for-new-versions.outputs.aermod_new_version }}.sha256" ]; then
            CHECKSUM=$(cat checksums/aermod_${{ needs.check-for-new-versions.outputs.aermod_new_version }}.sha256)
            echo "checksum=$CHECKSUM" >> $GITHUB_OUTPUT
            echo "checksum_success=true" >> $GITHUB_OUTPUT
          else
            echo "::error::Checksum file not found for AERMOD ${{ needs.check-for-new-versions.outputs.aermod_new_version }}"
            echo "checksum_success=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Update AERMOD formula
        if: needs.check-for-new-versions.outputs.aermod_update_needed == 'true' && steps.download-aermod.outputs.download_success == 'true' && steps.extract-aermod-checksum.outputs.checksum_success == 'true'
        run: |
          NEW_VERSION="${{ needs.check-for-new-versions.outputs.aermod_new_version }}"
          CHECKSUM="${{ steps.extract-aermod-checksum.outputs.checksum }}"
          TAG_DATE=$(date +%Y%m%d)
          
          # Update version and checksum in aermod.rb
          sed -i "s/version \"[0-9]*\"/version \"$NEW_VERSION\"/" Formula/aermod.rb
          sed -i "s|url \"https://gaftp.epa.gov/Air/aqmg/SCRAM/models/preferred/aermod/aermod_source.zip\"|url \"https://gaftp.epa.gov/Air/aqmg/SCRAM/models/preferred/aermod/aermod_source.zip\"|" Formula/aermod.rb
          sed -i "s/sha256 \"[a-f0-9]*\"/sha256 \"$CHECKSUM\"/" Formula/aermod.rb
          sed -i "s/sha256 :no_check/sha256 \"$CHECKSUM\"/" Formula/aermod.rb
          
          # Add or update resource for this version
          if grep -q "resource \"aermod_$NEW_VERSION\"" Formula/aermod.rb; then
            # Update existing resource
            sed -i "/resource \"aermod_$NEW_VERSION\"/,/end/ s|url \".*\"|url \"https://github.com/liamswan/brew-aermod/releases/download/v$TAG_DATE/aermod_$NEW_VERSION.zip\"|" Formula/aermod.rb
            sed -i "/resource \"aermod_$NEW_VERSION\"/,/end/ s/sha256 \"[a-f0-9]*\"/sha256 \"$CHECKSUM\"/" Formula/aermod.rb
          else
            # Add new resource
            RESOURCE_BLOCK="  resource \"aermod_$NEW_VERSION\" do\n    url \"https://github.com/liamswan/brew-aermod/releases/download/v$TAG_DATE/aermod_$NEW_VERSION.zip\"\n    sha256 \"$CHECKSUM\"\n  end\n"
            sed -i "/# Versioned resources for specific versions/a\\$RESOURCE_BLOCK" Formula/aermod.rb
          fi
          
          # Create versioned formula if it doesn't exist
          if [ ! -f "Formula/aermod@$NEW_VERSION.rb" ]; then
            cp Formula/aermod.rb "Formula/aermod@$NEW_VERSION.rb"
            sed -i "s/class Aermod < Formula/class AermodAT$NEW_VERSION < Formula/" "Formula/aermod@$NEW_VERSION.rb"
          fi
      
      # Download and update AERMET if needed
      - name: Download new AERMET version
        if: needs.check-for-new-versions.outputs.aermet_update_needed == 'true'
        id: download-aermet
        run: |
          # Create downloads and checksums directories if they don't exist
          mkdir -p downloads checksums

          echo "Downloading AERMET version ${{ needs.check-for-new-versions.outputs.aermet_new_version }}..."
          if bash scripts/fetch_latest_aermet.sh "${{ needs.check-for-new-versions.outputs.aermet_new_version }}"; then
            # Validate the downloaded file
            if [ -f "downloads/aermet_${{ needs.check-for-new-versions.outputs.aermet_new_version }}.zip" ]; then
              file_size=$(stat -c%s "downloads/aermet_${{ needs.check-for-new-versions.outputs.aermet_new_version }}.zip" || echo "0")
              if [ "$file_size" -gt "1000" ]; then
                echo "download_success=true" >> $GITHUB_OUTPUT
                echo "Downloaded AERMET successfully ($(($file_size/1024))KB)"
              else
                echo "download_success=false" >> $GITHUB_OUTPUT
                echo "Downloaded AERMET file is too small ($file_size bytes). Download may have failed or the file is empty."
              fi
            else
              echo "download_success=false" >> $GITHUB_OUTPUT
              echo "AERMET download failed, file not found: downloads/aermet_${{ needs.check-for-new-versions.outputs.aermet_new_version }}.zip"
            fi
          else
            echo "download_success=false" >> $GITHUB_OUTPUT
            echo "Failed to execute fetch_latest_aermet.sh for version ${{ needs.check-for-new-versions.outputs.aermet_new_version }}"
          fi
      
      - name: Extract AERMET checksum
        if: needs.check-for-new-versions.outputs.aermet_update_needed == 'true' && steps.download-aermet.outputs.download_success == 'true'
        id: extract-aermet-checksum
        run: |
          if [ -f "checksums/aermet_${{ needs.check-for-new-versions.outputs.aermet_new_version }}.sha256" ]; then
            CHECKSUM=$(cat checksums/aermet_${{ needs.check-for-new-versions.outputs.aermet_new_version }}.sha256)
            echo "checksum=$CHECKSUM" >> $GITHUB_OUTPUT
            echo "checksum_success=true" >> $GITHUB_OUTPUT
          else
            echo "::error::Checksum file not found for AERMET ${{ needs.check-for-new-versions.outputs.aermet_new_version }}"
            echo "checksum_success=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Update AERMET formula
        if: needs.check-for-new-versions.outputs.aermet_update_needed == 'true' && steps.download-aermet.outputs.download_success == 'true' && steps.extract-aermet-checksum.outputs.checksum_success == 'true'
        run: |
          NEW_VERSION="${{ needs.check-for-new-versions.outputs.aermet_new_version }}"
          CHECKSUM="${{ steps.extract-aermet-checksum.outputs.checksum }}"
          TAG_DATE=$(date +%Y%m%d)
          
          # Update version and checksum in aermet.rb
          sed -i "s/version \"[0-9]*\"/version \"$NEW_VERSION\"/" Formula/aermet.rb
          sed -i "s|url \"https://gaftp.epa.gov/Air/aqmg/SCRAM/models/met/aermet/aermet_source.zip\"|url \"https://gaftp.epa.gov/Air/aqmg/SCRAM/models/met/aermet/aermet_source.zip\"|" Formula/aermet.rb
          sed -i "s/sha256 \"[a-f0-9]*\"/sha256 \"$CHECKSUM\"/" Formula/aermet.rb
          sed -i "s/sha256 :no_check/sha256 \"$CHECKSUM\"/" Formula/aermet.rb
          
          # Add or update resource for this version
          if grep -q "resource \"aermet_$NEW_VERSION\"" Formula/aermet.rb; then
            # Update existing resource
            sed -i "/resource \"aermet_$NEW_VERSION\"/,/end/ s|url \".*\"|url \"https://github.com/liamswan/brew-aermod/releases/download/v$TAG_DATE/aermet_$NEW_VERSION.zip\"|" Formula/aermet.rb
            sed -i "/resource \"aermet_$NEW_VERSION\"/,/end/ s/sha256 \"[a-f0-9]*\"/sha256 \"$CHECKSUM\"/" Formula/aermet.rb
          else
            # Add new resource
            RESOURCE_BLOCK="  resource \"aermet_$NEW_VERSION\" do\n    url \"https://github.com/liamswan/brew-aermod/releases/download/v$TAG_DATE/aermet_$NEW_VERSION.zip\"\n    sha256 \"$CHECKSUM\"\n  end\n"
            sed -i "/# Versioned resources for specific versions/a\\$RESOURCE_BLOCK" Formula/aermet.rb
          fi
          
          # Create versioned formula if it doesn't exist
          if [ ! -f "Formula/aermet@$NEW_VERSION.rb" ]; then
            cp Formula/aermet.rb "Formula/aermet@$NEW_VERSION.rb"
            sed -i "s/class Aermet < Formula/class AermetAT$NEW_VERSION < Formula/" "Formula/aermet@$NEW_VERSION.rb"
          fi
      
      # Download and update AERMAP if needed
      - name: Download new AERMAP version
        if: needs.check-for-new-versions.outputs.aermap_update_needed == 'true'
        id: download-aermap
        run: |
          # Create downloads and checksums directories if they don't exist
          mkdir -p downloads checksums

          echo "Downloading AERMAP version ${{ needs.check-for-new-versions.outputs.aermap_new_version }}..."
          if bash scripts/fetch_latest_aermap.sh "${{ needs.check-for-new-versions.outputs.aermap_new_version }}"; then
            # Validate the downloaded file
            if [ -f "downloads/aermap_${{ needs.check-for-new-versions.outputs.aermap_new_version }}.zip" ]; then
              file_size=$(stat -c%s "downloads/aermap_${{ needs.check-for-new-versions.outputs.aermap_new_version }}.zip" || echo "0")
              if [ "$file_size" -gt "1000" ]; then # Check if file size is greater than 1KB
                echo "download_success=true" >> $GITHUB_OUTPUT
                echo "Downloaded AERMAP successfully ($(($file_size/1024))KB)."
              else
                echo "download_success=false" >> $GITHUB_OUTPUT
                echo "Downloaded AERMAP file is too small ($file_size bytes). Download may have failed or the file is empty."
              fi
            else
              echo "download_success=false" >> $GITHUB_OUTPUT
              echo "AERMAP download failed, file not found: downloads/aermap_${{ needs.check-for-new-versions.outputs.aermap_new_version }}.zip"
            fi
          else
            echo "download_success=false" >> $GITHUB_OUTPUT
            echo "Failed to execute fetch_latest_aermap.sh for version ${{ needs.check-for-new-versions.outputs.aermap_new_version }}"
          fi
      
      - name: Extract AERMAP checksum
        if: needs.check-for-new-versions.outputs.aermap_update_needed == 'true' && steps.download-aermap.outputs.download_success == 'true'
        id: extract-aermap-checksum
        run: |
          if [ -f "checksums/aermap_${{ needs.check-for-new-versions.outputs.aermap_new_version }}.sha256" ]; then
            CHECKSUM=$(cat checksums/aermap_${{ needs.check-for-new-versions.outputs.aermap_new_version }}.sha256)
            echo "checksum=$CHECKSUM" >> $GITHUB_OUTPUT
            echo "checksum_success=true" >> $GITHUB_OUTPUT
          else
            echo "::error::Checksum file not found for AERMAP ${{ needs.check-for-new-versions.outputs.aermap_new_version }}"
            echo "checksum_success=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Update AERMAP formula
        if: needs.check-for-new-versions.outputs.aermap_update_needed == 'true' && steps.download-aermap.outputs.download_success == 'true' && steps.extract-aermap-checksum.outputs.checksum_success == 'true'
        run: |
          NEW_VERSION="${{ needs.check-for-new-versions.outputs.aermap_new_version }}"
          CHECKSUM="${{ steps.extract-aermap-checksum.outputs.checksum }}"
          TAG_DATE=$(date +%Y%m%d)
          
          # Update version and checksum in aermap.rb
          sed -i "s/version \"[0-9]*\"/version \"$NEW_VERSION\"/" Formula/aermap.rb
          sed -i "s|url \"https://gaftp.epa.gov/Air/aqmg/SCRAM/models/related/aermap/aermap_source.zip\"|url \"https://gaftp.epa.gov/Air/aqmg/SCRAM/models/related/aermap/aermap_source.zip\"|" Formula/aermap.rb
          sed -i "s/sha256 \"[a-f0-9]*\"/sha256 \"$CHECKSUM\"/" Formula/aermap.rb
          sed -i "s/sha256 :no_check/sha256 \"$CHECKSUM\"/" Formula/aermap.rb
          
          # Add or update resource for this version
          if grep -q "resource \"aermap_$NEW_VERSION\"" Formula/aermap.rb; then
            # Update existing resource
            sed -i "/resource \"aermap_$NEW_VERSION\"/,/end/ s|url \".*\"|url \"https://github.com/liamswan/brew-aermod/releases/download/v$TAG_DATE/aermap_$NEW_VERSION.zip\"|" Formula/aermap.rb
            sed -i "/resource \"aermap_$NEW_VERSION\"/,/end/ s/sha256 \"[a-f0-9]*\"/sha256 \"$CHECKSUM\"/" Formula/aermap.rb
          else
            # Add new resource
            RESOURCE_BLOCK="  resource \"aermap_$NEW_VERSION\" do\n    url \"https://github.com/liamswan/brew-aermod/releases/download/v$TAG_DATE/aermap_$NEW_VERSION.zip\"\n    sha256 \"$CHECKSUM\"\n  end\n"
            sed -i "/# Versioned resources for specific versions/a\\$RESOURCE_BLOCK" Formula/aermap.rb
          fi
          
          # Create versioned formula if it doesn't exist
          if [ ! -f "Formula/aermap@$NEW_VERSION.rb" ]; then
            cp Formula/aermap.rb "Formula/aermap@$NEW_VERSION.rb"
            sed -i "s/class Aermap < Formula/class AermapAT$NEW_VERSION < Formula/" "Formula/aermap@$NEW_VERSION.rb"
          fi
      
      # Update the suite formula
      - name: Update aermod-suite formula
        run: |
          TAG_DATE=$(date +%Y%m%d)
          
          # Get the latest version of each component
          AERMOD_VERSION="${{ needs.check-for-new-versions.outputs.aermod_update_needed == 'true' && needs.check-for-new-versions.outputs.aermod_new_version || needs.check-for-new-versions.outputs.aermod_current_version }}"
          AERMET_VERSION="${{ needs.check-for-new-versions.outputs.aermet_update_needed == 'true' && needs.check-for-new-versions.outputs.aermet_new_version || needs.check-for-new-versions.outputs.aermet_current_version }}"
          AERMAP_VERSION="${{ needs.check-for-new-versions.outputs.aermap_update_needed == 'true' && needs.check-for-new-versions.outputs.aermap_new_version || needs.check-for-new-versions.outputs.aermap_current_version }}"
          
          # Create a combined version string for the suite
          # If all components have the same version, use that, otherwise use a dash-separated string
          if [ "$AERMOD_VERSION" == "$AERMET_VERSION" ] && [ "$AERMET_VERSION" == "$AERMAP_VERSION" ]; then
            SUITE_VERSION="$AERMOD_VERSION"
            echo "All components have the same version: $SUITE_VERSION"
          else
            SUITE_VERSION="${AERMOD_VERSION}-${AERMET_VERSION}-${AERMAP_VERSION}"
            echo "Using combined version string: $SUITE_VERSION"
          fi
          
          # Update version in aermod-suite.rb
          sed -i "s/version \"[0-9]*\"/version \"$SUITE_VERSION\"/" Formula/aermod-suite.rb
          sed -i "s/version \"[0-9]*-[0-9]*-[0-9]*\"/version \"$SUITE_VERSION\"/" Formula/aermod-suite.rb
          
          # Update dependencies to use the latest versions
          if [ "${{ needs.check-for-new-versions.outputs.aermod_update_needed }}" == "true" ]; then
            NEW_VERSION="${{ needs.check-for-new-versions.outputs.aermod_new_version }}"
            sed -i "s/depends_on \"liamswan\/brew-aermod\/aermod@[0-9]*\"/depends_on \"liamswan\/brew-aermod\/aermod@$NEW_VERSION\"/" Formula/aermod-suite.rb
          fi
          
          if [ "${{ needs.check-for-new-versions.outputs.aermet_update_needed }}" == "true" ]; then
            NEW_VERSION="${{ needs.check-for-new-versions.outputs.aermet_new_version }}"
            sed -i "s/depends_on \"liamswan\/brew-aermod\/aermet@[0-9]*\"/depends_on \"liamswan\/brew-aermod\/aermet@$NEW_VERSION\"/" Formula/aermod-suite.rb
          fi
          
          if [ "${{ needs.check-for-new-versions.outputs.aermap_update_needed }}" == "true" ]; then
            NEW_VERSION="${{ needs.check-for-new-versions.outputs.aermap_new_version }}"
            sed -i "s/depends_on \"liamswan\/brew-aermod\/aermap@[0-9]*\"/depends_on \"liamswan\/brew-aermod\/aermap@$NEW_VERSION\"/" Formula/aermod-suite.rb
          fi
          
          # Add a comment to the formula indicating the component versions
          COMPONENT_VERSIONS="# AERMOD Suite with components: AERMOD $AERMOD_VERSION, AERMET $AERMET_VERSION, AERMAP $AERMAP_VERSION"
          if grep -q "# AERMOD Suite with components:" Formula/aermod-suite.rb; then
            sed -i "s/# AERMOD Suite with components:.*/$COMPONENT_VERSIONS/" Formula/aermod-suite.rb
          else
            # Insert after the class declaration
            sed -i "/class AermodSuite < Formula/a\\  $COMPONENT_VERSIONS" Formula/aermod-suite.rb
          fi
      
      - name: Check for changes to commit
        id: check_commit_changes
        run: |
          # Add all potentially changed files first
          git add downloads/ checksums/ Formula/
          # Check if there are changes staged for commit
          if git diff --staged --quiet; then
            echo "no_changes_to_commit=true" >> $GITHUB_OUTPUT
            echo "No changes to commit."
          else
            echo "no_changes_to_commit=false" >> $GITHUB_OUTPUT
            echo "Changes detected, will commit."
          fi
      
      # Commit all changes
      - name: Commit and push changes
        if: steps.check_commit_changes.outputs.no_changes_to_commit != 'true'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          # Files are already added in the check_commit_changes step and README update step
          
          # Create commit message based on what was updated
          COMMIT_MSG="Update AERMOD Suite components [automated]:"
          
          if [ "${{ needs.check-for-new-versions.outputs.aermod_update_needed }}" == "true" ]; then
            COMMIT_MSG="$COMMIT_MSG AERMOD ${{ needs.check-for-new-versions.outputs.aermod_new_version }}"
          fi
          
          if [ "${{ needs.check-for-new-versions.outputs.aermet_update_needed }}" == "true" ]; then
            COMMIT_MSG="$COMMIT_MSG AERMET ${{ needs.check-for-new-versions.outputs.aermet_new_version }}"
          fi
          
          if [ "${{ needs.check-for-new-versions.outputs.aermap_update_needed }}" == "true" ]; then
            COMMIT_MSG="$COMMIT_MSG AERMAP ${{ needs.check-for-new-versions.outputs.aermap_new_version }}"
          fi
          
          # Add note about README update
          COMMIT_MSG="$COMMIT_MSG (README updated)"
          
          git commit -m "$COMMIT_MSG"
          git push
      
      # Prepare release assets
      - name: Prepare release assets
        id: prepare-assets
        run: |
          # Create directory for assets and changes
          mkdir -p release_assets
          touch release_assets/changes.md
          
          echo "# Changes in this Release" > release_assets/changes.md
          echo "" >> release_assets/changes.md
          
          # Get current date for release tag
          TAG_DATE=$(date +%Y%m%d)
          echo "tag_date=$TAG_DATE" >> $GITHUB_OUTPUT
          
          # Copy the updated README for release assets
          cp README.md release_assets/README.md
          
          # Process each component
          components=0
          
          # If this is a manual version check, we need to create the release assets without downloads
          if [ "${{ github.event.inputs.manual_version_check }}" == "true" ]; then
            # Add information for manual version update
            echo "## Manual Version Update" >> release_assets/changes.md
            echo "This release was created with manual version override." >> release_assets/changes.md
            echo "" >> release_assets/changes.md
            
            if [ -n "${{ github.event.inputs.aermod_version }}" ]; then
              components=$((components + 1))
              echo "## AERMOD" >> release_assets/changes.md
              echo "- Updated to version ${{ github.event.inputs.aermod_version }}" >> release_assets/changes.md
              echo "" >> release_assets/changes.md
            fi
            
            if [ -n "${{ github.event.inputs.aermet_version }}" ]; then
              components=$((components + 1))
              echo "## AERMET" >> release_assets/changes.md
              echo "- Updated to version ${{ github.event.inputs.aermet_version }}" >> release_assets/changes.md
              echo "" >> release_assets/changes.md
            fi
            
            if [ -n "${{ github.event.inputs.aermap_version }}" ]; then
              components=$((components + 1))
              echo "## AERMAP" >> release_assets/changes.md
              echo "- Updated to version ${{ github.event.inputs.aermap_version }}" >> release_assets/changes.md
              echo "" >> release_assets/changes.md
            fi
            
            # Set output
            echo "has_updates=true" >> $GITHUB_OUTPUT
            echo "Created manual update for $components component(s)"
          else
            # Standard automatic version check processing
            if [ "${{ needs.check-for-new-versions.outputs.aermod_update_needed }}" == "true" ]; then
              components=$((components + 1))
              # Validate and copy AERMOD files
              if [ -f "downloads/aermod_${{ needs.check-for-new-versions.outputs.aermod_new_version }}.zip" ]; then
                cp downloads/aermod_${{ needs.check-for-new-versions.outputs.aermod_new_version }}.zip release_assets/
                cp checksums/aermod_${{ needs.check-for-new-versions.outputs.aermod_new_version }}.sha256 release_assets/
                echo "## AERMOD" >> release_assets/changes.md
                echo "- Updated to version ${{ needs.check-for-new-versions.outputs.aermod_new_version }}" >> release_assets/changes.md
                echo "- SHA256: $(cat checksums/aermod_${{ needs.check-for-new-versions.outputs.aermod_new_version }}.sha256)" >> release_assets/changes.md
                echo "" >> release_assets/changes.md
              else
                echo "::error::AERMOD files not found for release preparation"
              fi
            fi
            
            if [ "${{ needs.check-for-new-versions.outputs.aermet_update_needed }}" == "true" ]; then
              components=$((components + 1))
              # Validate and copy AERMET files
              if [ -f "downloads/aermet_${{ needs.check-for-new-versions.outputs.aermet_new_version }}.zip" ]; then
                cp downloads/aermet_${{ needs.check-for-new-versions.outputs.aermet_new_version }}.zip release_assets/
                cp checksums/aermet_${{ needs.check-for-new-versions.outputs.aermet_new_version }}.sha256 release_assets/
                echo "## AERMET" >> release_assets/changes.md
                echo "- Updated to version ${{ needs.check-for-new-versions.outputs.aermet_new_version }}" >> release_assets/changes.md
                echo "- SHA256: $(cat checksums/aermet_${{ needs.check-for-new-versions.outputs.aermet_new_version }}.sha256)" >> release_assets/changes.md
                echo "" >> release_assets/changes.md
              else
                echo "::error::AERMET files not found for release preparation"
              fi
            fi
            
            if [ "${{ needs.check-for-new-versions.outputs.aermap_update_needed }}" == "true" ]; then
              components=$((components + 1))
              # Validate and copy AERMAP files
              if [ -f "downloads/aermap_${{ needs.check-for-new-versions.outputs.aermap_new_version }}.zip" ]; then
                cp downloads/aermap_${{ needs.check-for-new-versions.outputs.aermap_new_version }}.zip release_assets/
                cp checksums/aermap_${{ needs.check-for-new-versions.outputs.aermap_new_version }}.sha256 release_assets/
                echo "## AERMAP" >> release_assets/changes.md
                echo "- Updated to version ${{ needs.check-for-new-versions.outputs.aermap_new_version }}" >> release_assets/changes.md
                echo "- SHA256: $(cat checksums/aermap_${{ needs.check-for-new-versions.outputs.aermap_new_version }}.sha256)" >> release_assets/changes.md
                echo "" >> release_assets/changes.md
              else
                echo "::error::AERMAP files not found for release preparation"
              fi
            fi
            
            # Set the status
            if [ "$components" -gt 0 ]; then
              echo "has_updates=true" >> $GITHUB_OUTPUT
              echo "Found $components component(s) to update"
            else
              echo "has_updates=false" >> $GITHUB_OUTPUT
              echo "No components to update"
            fi
          fi
          
          # Add information about README update
          echo "## Documentation" >> release_assets/changes.md
          echo "- Updated README.md with latest version information" >> release_assets/changes.md
          echo "- Current versions:" >> release_assets/changes.md
          
          if [ "${{ github.event.inputs.manual_version_check }}" == "true" ]; then
            # Use manual versions for README update
            if [ -n "${{ github.event.inputs.aermod_version }}" ]; then
              echo "  - AERMOD: ${{ github.event.inputs.aermod_version }}" >> release_assets/changes.md
              AERMOD_VERSION="${{ github.event.inputs.aermod_version }}"
            else
              echo "  - AERMOD: ${{ needs.check-for-new-versions.outputs.aermod_current_version }}" >> release_assets/changes.md
              AERMOD_VERSION="${{ needs.check-for-new-versions.outputs.aermod_current_version }}"
            fi
            
            if [ -n "${{ github.event.inputs.aermet_version }}" ]; then
              echo "  - AERMET: ${{ github.event.inputs.aermet_version }}" >> release_assets/changes.md
              AERMET_VERSION="${{ github.event.inputs.aermet_version }}"
            else
              echo "  - AERMET: ${{ needs.check-for-new-versions.outputs.aermet_current_version }}" >> release_assets/changes.md
              AERMET_VERSION="${{ needs.check-for-new-versions.outputs.aermet_current_version }}"
            fi
            
            if [ -n "${{ github.event.inputs.aermap_version }}" ]; then
              echo "  - AERMAP: ${{ github.event.inputs.aermap_version }}" >> release_assets/changes.md
              AERMAP_VERSION="${{ github.event.inputs.aermap_version }}"
            else
              echo "  - AERMAP: ${{ needs.check-for-new-versions.outputs.aermap_current_version }}" >> release_assets/changes.md
              AERMAP_VERSION="${{ needs.check-for-new-versions.outputs.aermap_current_version }}"
            fi
          else
            # Use standard versions from version check
            if [ "${{ needs.check-for-new-versions.outputs.aermod_update_needed }}" == "true" ]; then
              echo "  - AERMOD: ${{ needs.check-for-new-versions.outputs.aermod_new_version }}" >> release_assets/changes.md
              AERMOD_VERSION="${{ needs.check-for-new-versions.outputs.aermod_new_version }}"
            else
              echo "  - AERMOD: ${{ needs.check-for-new-versions.outputs.aermod_current_version }}" >> release_assets/changes.md
              AERMOD_VERSION="${{ needs.check-for-new-versions.outputs.aermod_current_version }}"
            fi
            
            if [ "${{ needs.check-for-new-versions.outputs.aermet_update_needed }}" == "true" ]; then
              echo "  - AERMET: ${{ needs.check-for-new-versions.outputs.aermet_new_version }}" >> release_assets/changes.md
              AERMET_VERSION="${{ needs.check-for-new-versions.outputs.aermet_new_version }}"
            else
              echo "  - AERMET: ${{ needs.check-for-new-versions.outputs.aermet_current_version }}" >> release_assets/changes.md
              AERMET_VERSION="${{ needs.check-for-new-versions.outputs.aermet_current_version }}"
            fi
            
            if [ "${{ needs.check-for-new-versions.outputs.aermap_update_needed }}" == "true" ]; then
              echo "  - AERMAP: ${{ needs.check-for-new-versions.outputs.aermap_new_version }}" >> release_assets/changes.md
              AERMAP_VERSION="${{ needs.check-for-new-versions.outputs.aermap_new_version }}"
            else
              echo "  - AERMAP: ${{ needs.check-for-new-versions.outputs.aermap_current_version }}" >> release_assets/changes.md
              AERMAP_VERSION="${{ needs.check-for-new-versions.outputs.aermap_current_version }}"
            fi
          fi
          
          # Get the suite version
          if [ "$AERMOD_VERSION" == "$AERMET_VERSION" ] && [ "$AERMET_VERSION" == "$AERMAP_VERSION" ]; then
            SUITE_VERSION="$AERMOD_VERSION"
          else
            SUITE_VERSION="${AERMOD_VERSION}-${AERMET_VERSION}-${AERMAP_VERSION}"
          fi
          
          echo "  - AERMOD-Suite: $SUITE_VERSION (combined version)" >> release_assets/changes.md
      
      # Create GitHub release with appropriate files
      - name: Create GitHub Release
        if: steps.prepare-assets.outputs.has_updates == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.prepare-assets.outputs.tag_date }}
          name: AERMOD Suite Update - ${{ steps.prepare-assets.outputs.tag_date }}
          body_path: release_assets/changes.md
          files: |
            ${{ github.event.inputs.manual_version_check != 'true' && 'release_assets/*.zip' || '' }}
            ${{ github.event.inputs.manual_version_check != 'true' && 'release_assets/*.sha256' || '' }}
            release_assets/README.md
          draft: false
          prerelease: false
          fail_on_unmatched_files: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Verify Release Assets
        if: steps.prepare-assets.outputs.has_updates == 'true'
        run: |
          # Wait a bit for the release to be processed
          sleep 5
          
          # List the release assets for verification
          echo "Verifying release assets..."
          gh release view v${{ steps.prepare-assets.outputs.tag_date }} --json assets -q '.assets[].name'
        env:
          GH_TOKEN: ${{ github.token }}

  audit-and-style-fix:
    name: Audit and fix formula style
    needs: [check-for-new-versions, update-formulas]
    # Run if formulas were updated or if force_run is true
    if: always() && (needs.check-for-new-versions.outputs.any_updates == 'true' || github.event.inputs.force_run == 'true')
    runs-on: macos-latest
    steps:
      - name: Set up Homebrew
        id: set-up-homebrew
        uses: Homebrew/actions/setup-homebrew@master
      
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}
      
      - name: Run brew audit
        id: audit
        run: |
          echo "Running brew audit on all formulas..."
          
          # Create a report file
          touch formula_audit_report.md
          echo "# Formula Audit Report" > formula_audit_report.md
          echo "Generated on $(date)" >> formula_audit_report.md
          echo "" >> formula_audit_report.md
          
          # Audit all formulas
          FORMULAS=$(find Formula -name "*.rb")
          ALL_PASS=true
          
          for formula in $FORMULAS; do
            echo "Auditing $formula..."
            echo "## Auditing $formula" >> formula_audit_report.md
            echo '```' >> formula_audit_report.md
            if brew audit --strict "$formula"; then
              echo "✅ $formula passed audit" >> formula_audit_report.md
            else
              echo "⚠️ $formula has audit warnings" >> formula_audit_report.md
              ALL_PASS=false
            fi
            echo '```' >> formula_audit_report.md
            echo "" >> formula_audit_report.md
          done
          
          if [ "$ALL_PASS" = true ]; then
            echo "audit_success=true" >> $GITHUB_OUTPUT
            echo "All formulas passed audit!"
          else
            echo "audit_success=false" >> $GITHUB_OUTPUT
            echo "Some formulas have audit warnings. See report for details."
          fi
      
      - name: Fix formula style
        id: style_fix
        run: |
          echo "Running brew style --fix on all formulas..."
          
          # Create a report file
          touch formula_fix_report.md
          echo "# Formula Style Fix Report" > formula_fix_report.md
          echo "Generated on $(date)" >> formula_fix_report.md
          echo "" >> formula_fix_report.md
          
          # Fix style for all formulas
          FORMULAS=$(find Formula -name "*.rb")
          ALL_FIXED=true
          
          for formula in $FORMULAS; do
            echo "Fixing style for $formula..."
            echo "## Fixing style for $formula" >> formula_fix_report.md
            echo '```' >> formula_fix_report.md
            if brew style --fix "$formula"; then
              echo "✅ $formula style fixed or already good" >> formula_fix_report.md
            else
              echo "⚠️ $formula has style issues that couldn't be automatically fixed" >> formula_fix_report.md
              ALL_FIXED=false
            fi
            echo '```' >> formula_fix_report.md
            echo "" >> formula_fix_report.md
          done
          
          if [ "$ALL_FIXED" = true ]; then
            echo "style_fix_success=true" >> $GITHUB_OUTPUT
            echo "All formulas have good style or were fixed!"
          else
            echo "style_fix_success=false" >> $GITHUB_OUTPUT
            echo "Some formulas have style issues that couldn't be automatically fixed. See report for details."
          fi
      
      - name: Check for changes to commit
        id: check_style_changes
        run: |
          git add Formula/
          git diff-index --quiet HEAD --
          if [ $? -eq 0 ]; then
            echo "no_style_changes=true" >> $GITHUB_OUTPUT
            echo "No style changes to commit."
          else
            echo "no_style_changes=false" >> $GITHUB_OUTPUT
            echo "Style changes detected, will commit."
          fi
      
      - name: Commit style changes
        if: steps.check_style_changes.outputs.no_style_changes == 'false'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          git commit -m "Apply brew style fixes [automated]"
          git push
      
      - name: Upload audit and style reports
        uses: actions/upload-artifact@v3
        with:
          name: formula-reports
          path: |
            formula_audit_report.md
            formula_fix_report.md
          retention-days: 14

  test-aermod:
    name: Install and test AERMOD
    needs: [check-for-new-versions, update-formulas, audit-and-style-fix]
    if: (needs.check-for-new-versions.outputs.aermod_update_needed == 'true' || github.event.inputs.force_run == 'true') && always()
    runs-on: macos-latest
    steps:
      - name: Set up Homebrew
        id: set-up-homebrew
        uses: Homebrew/actions/setup-homebrew@master
      
      - name: Add tap
        run: |
          brew tap liamswan/brew-aermod https://github.com/liamswan/brew-aermod
          brew tap liamswan/brew-aermod https://github.com/liamswan/brew-aermod
      
      - name: Install and test AERMOD
        continue-on-error: true
        run: |
          echo "Testing AERMOD version: ${{ needs.check-for-new-versions.outputs.aermod_new_version || needs.check-for-new-versions.outputs.aermod_current_version }}"
          
          # Diagnostic: Check downloaded files
          echo "Checking ZIP file contents before installation:"
          VERSION="${{ needs.check-for-new-versions.outputs.aermod_new_version || needs.check-for-new-versions.outputs.aermod_current_version }}"
          # Skip tap-new as the tap is already added in previous steps
          brew fetch --force liamswan/brew-aermod/aermod
          CACHE_PATH=$(brew --cache)
          echo "Homebrew cache path: $CACHE_PATH"
          ls -la $CACHE_PATH
          
          # Look for any AERMOD downloaded files
          find $CACHE_PATH -name "*aermod*" -o -name "*AERMOD*" | sort
          
          # Check contents of any found zip files
          ZIP_FILES=$(find $CACHE_PATH -name "*aermod*.zip" -o -name "*AERMOD*.zip")
          if [ -n "$ZIP_FILES" ]; then
            for zip_file in $ZIP_FILES; do
              echo "Contents of $zip_file:"
              unzip -l "$zip_file" | head -n 20
              
              # Check for the source code directory
              echo "Looking for aermod_source_code_$VERSION in $zip_file:"
              unzip -l "$zip_file" | grep -i "aermod_source_code" || echo "No aermod_source_code directory found in $zip_file"
            done
          else
            echo "No AERMOD ZIP files found in cache"
          fi
          
          # Install AERMOD with verbose output
          echo "Installing AERMOD with verbose output:"
          HOMEBREW_CURL_VERBOSE=1 brew install -v liamswan/brew-aermod/aermod
          
          # Check what happened after installation
          echo "AERMOD installation directories:"
          ls -la $(brew --cellar)/aermod
          
          # Check what's in the installed formula directory
          CELLAR_PATH=$(brew --cellar)/aermod/*
          echo "Contents of AERMOD cellar directory:"
          find $CELLAR_PATH -type f | grep -v "\.o$" | sort
          
          # Look for source code directories
          echo "Looking for source code directory in Cellar:"
          find $CELLAR_PATH -type d -name "*source*" -o -name "*aermod*" | sort
          
          # Try to run test with verbose output
          echo "Running brew test with verbose output:"
          brew test -v liamswan/brew-aermod/aermod || {
            echo "Test failed. Checking environment:"
            echo "Current directory: $(pwd)"
            ls -la
            echo "AERMOD formula content:"
            cat $(brew formula liamswan/brew-aermod/aermod)
          }

      # Create success comment
      - name: Create success notification
        if: success()
        run: |
          echo "✅ Successfully installed and tested AERMOD"
          echo ""
          if [ "${{ needs.check-for-new-versions.outputs.aermod_update_needed }}" == "true" ]; then
            echo "Updated AERMOD: ${{ needs.check-for-new-versions.outputs.aermod_current_version }} -> ${{ needs.check-for-new-versions.outputs.aermod_new_version }}"
          else
            echo "Tested current AERMOD version: ${{ needs.check-for-new-versions.outputs.aermod_current_version }}"
          fi

  test-aermet:
    name: Install and test AERMET
    needs: [check-for-new-versions, update-formulas, audit-and-style-fix]
    if: (needs.check-for-new-versions.outputs.aermet_update_needed == 'true' || github.event.inputs.force_run == 'true') && always()
    runs-on: macos-latest
    steps:
      - name: Set up Homebrew
        id: set-up-homebrew
        uses: Homebrew/actions/setup-homebrew@master
      
      - name: Add tap
        run: |
          brew tap liamswan/brew-aermod https://github.com/liamswan/brew-aermod
          brew tap liamswan/brew-aermod https://github.com/liamswan/brew-aermod
      
      - name: Install and test AERMET
        continue-on-error: true
        run: |
          echo "Testing AERMET version: ${{ needs.check-for-new-versions.outputs.aermet_new_version || needs.check-for-new-versions.outputs.aermet_current_version }}"
          
          # Diagnostic: Check downloaded files
          echo "Checking ZIP file contents before installation:"
          VERSION="${{ needs.check-for-new-versions.outputs.aermet_new_version || needs.check-for-new-versions.outputs.aermet_current_version }}"
          brew fetch --force liamswan/brew-aermod/aermet
          CACHE_PATH=$(brew --cache)
          echo "Homebrew cache path: $CACHE_PATH"
          
          # Look for any AERMET downloaded files
          find $CACHE_PATH -name "*aermet*" -o -name "*AERMET*" | sort
          
          # Check contents of any found zip files
          ZIP_FILES=$(find $CACHE_PATH -name "*aermet*.zip" -o -name "*AERMET*.zip")
          if [ -n "$ZIP_FILES" ]; then
            for zip_file in $ZIP_FILES; do
              echo "Contents of $zip_file:"
              unzip -l "$zip_file" | head -n 20
              
              # Check for the source code directory
              echo "Looking for aermet_source_code_$VERSION in $zip_file:"
              unzip -l "$zip_file" | grep -i "aermet_source_code" || echo "No aermet_source_code directory found in $zip_file"
            done
          else
            echo "No AERMET ZIP files found in cache"
          fi
          
          # Install AERMET with verbose output
          echo "Installing AERMET with verbose output:"
          HOMEBREW_CURL_VERBOSE=1 brew install -v liamswan/brew-aermod/aermet
          
          # Check what happened after installation
          echo "AERMET installation directories:"
          ls -la $(brew --cellar)/aermet
          
          # Check what's in the installed formula directory
          CELLAR_PATH=$(brew --cellar)/aermet/*
          echo "Contents of AERMET cellar directory:"
          find $CELLAR_PATH -type f | grep -v "\.o$" | sort
          
          # Look for source code directories
          echo "Looking for source code directory in Cellar:"
          find $CELLAR_PATH -type d -name "*source*" -o -name "*aermet*" | sort
          
          # Try to run test with verbose output:
          echo "Running brew test with verbose output:"
          brew test -v liamswan/brew-aermod/aermet || {
            echo "Test failed. Checking environment:"
            echo "Current directory: $(pwd)"
            ls -la
            echo "AERMET formula content:"
            cat $(brew formula liamswan/brew-aermod/aermet)
          }

      # Create success comment
      - name: Create success notification
        if: success()
        run: |
          echo "✅ Successfully installed and tested AERMET"
          echo ""
          if [ "${{ needs.check-for-new-versions.outputs.aermet_update_needed }}" == "true" ]; then
            echo "Updated AERMET: ${{ needs.check-for-new-versions.outputs.aermet_current_version }} -> ${{ needs.check-for-new-versions.outputs.aermet_new_version }}"
          else
            echo "Tested current AERMET version: ${{ needs.check-for-new-versions.outputs.aermet_current_version }}"
          fi

  test-aermap:
    name: Install and test AERMAP
    needs: [check-for-new-versions, update-formulas, audit-and-style-fix]
    if: (needs.check-for-new-versions.outputs.aermap_update_needed == 'true' || github.event.inputs.force_run == 'true') && always()
    runs-on: macos-latest
    steps:
      - name: Set up Homebrew
        id: set-up-homebrew
        uses: Homebrew/actions/setup-homebrew@master
      
      - name: Add tap
        run: |
          brew tap liamswan/brew-aermod https://github.com/liamswan/brew-aermod
          brew tap liamswan/brew-aermod https://github.com/liamswan/brew-aermod
      
      - name: Install and test AERMAP
        continue-on-error: true
        run: |
          echo "Testing AERMAP version: ${{ needs.check-for-new-versions.outputs.aermap_new_version || needs.check-for-new-versions.outputs.aermap_current_version }}"
          
          # Diagnostic: Check downloaded files
          echo "Checking ZIP file contents before installation:"
          VERSION="${{ needs.check-for-new-versions.outputs.aermap_new_version || needs.check-for-new-versions.outputs.aermap_current_version }}"
          brew fetch --force liamswan/brew-aermod/aermap
          CACHE_PATH=$(brew --cache)
          echo "Homebrew cache path: $CACHE_PATH"
          
          # Look for any AERMAP downloaded files
          find $CACHE_PATH -name "*aermap*" -o -name "*AERMAP*" | sort
          
          # Check contents of any found zip files
          ZIP_FILES=$(find $CACHE_PATH -name "*aermap*.zip" -o -name "*AERMAP*.zip")
          if [ -n "$ZIP_FILES" ]; then
            for zip_file in $ZIP_FILES; do
              echo "Contents of $zip_file:"
              unzip -l "$zip_file" | head -n 20
              
              # Check for the source code directory
              echo "Looking for aermap_source_code_$VERSION in $zip_file:"
              unzip -l "$zip_file" | grep -i "aermap_source_code" || echo "No aermap_source_code directory found in $zip_file"
            done
          else
            echo "No AERMAP ZIP files found in cache"
          fi
          
          # Install AERMAP with verbose output
          echo "Installing AERMAP with verbose output:"
          HOMEBREW_CURL_VERBOSE=1 brew install -v liamswan/brew-aermod/aermap
          
          # Check what happened after installation
          echo "AERMAP installation directories:"
          ls -la $(brew --cellar)/aermap
          
          # Check what's in the installed formula directory
          CELLAR_PATH=$(brew --cellar)/aermap/*
          echo "Contents of AERMAP cellar directory:"
          find $CELLAR_PATH -type f | grep -v "\.o$" | sort
          
          # Look for source code directories
          echo "Looking for source code directory in Cellar:"
          find $CELLAR_PATH -type d -name "*source*" -o -name "*aermap*" | sort
          
          # Try to run test with verbose output
          echo "Running brew test with verbose output:"
          brew test -v liamswan/brew-aermod/aermap || {
            echo "Test failed. Checking environment:"
            echo "Current directory: $(pwd)"
            ls -la
            echo "AERMAP formula content:"
            cat $(brew formula liamswan/brew-aermod/aermap)
          }
      
      # Create success comment
      - name: Create success notification
        if: success()
        run: |
          echo "✅ Successfully installed and tested AERMAP"
          echo ""
          if [ "${{ needs.check-for-new-versions.outputs.aermap_update_needed }}" == "true" ]; then
            echo "Updated AERMAP: ${{ needs.check-for-new-versions.outputs.aermap_current_version }} -> ${{ needs.check-for-new-versions.outputs.aermap_new_version }}"
          else
            echo "Tested current AERMAP version: ${{ needs.check-for-new-versions.outputs.aermap_current_version }}"
          fi

  test-aermod-suite:
    name: Install and test AERMOD Suite
    needs: [check-for-new-versions, update-formulas, audit-and-style-fix]
    # Always run when force_run is true, or if any component has been updated
    if: (github.event.inputs.force_run == 'true' || needs.check-for-new-versions.outputs.any_updates == 'true') && always()
    runs-on: macos-latest
    steps:
      - name: Set up Homebrew
        id: set-up-homebrew
        uses: Homebrew/actions/setup-homebrew@master
      
      - name: Add tap
        run: |
          brew tap liamswan/brew-aermod https://github.com/liamswan/brew-aermod
          brew tap liamswan/brew-aermod https://github.com/liamswan/brew-aermod
      
      - name: Install and test AERMOD Suite
        continue-on-error: true
        run: |
          echo "Testing AERMOD Suite with components:"
          echo "- AERMOD: ${{ needs.check-for-new-versions.outputs.aermod_new_version || needs.check-for-new-versions.outputs.aermod_current_version }}"
          echo "- AERMET: ${{ needs.check-for-new-versions.outputs.aermet_new_version || needs.check-for-new-versions.outputs.aermet_current_version }}"
          echo "- AERMAP: ${{ needs.check-for-new-versions.outputs.aermap_new_version || needs.check-for-new-versions.outputs.aermap_current_version }}"
          
          # Fetch the formula first
          brew fetch --force liamswan/brew-aermod/aermod-suite
          
          # Install the suite with verbose output
          echo "Installing AERMOD Suite with verbose output:"
          HOMEBREW_CURL_VERBOSE=1 brew install -v liamswan/brew-aermod/aermod-suite
          
          # Check what was installed
          echo "AERMOD Suite installed components:"
          brew list liamswan/brew-aermod/aermod-suite
          
          # Verify that all dependencies were installed
          echo "Checking AERMOD installation:"
          brew list liamswan/brew-aermod/aermod || echo "AERMOD not found"
          
          echo "Checking AERMET installation:"
          brew list liamswan/brew-aermod/aermet || echo "AERMET not found"
          
          echo "Checking AERMAP installation:"
          brew list liamswan/brew-aermod/aermap || echo "AERMAP not found"
          
          # Test that the executables are available
          echo "Testing AERMOD executable:"
          which aermod || echo "AERMOD executable not found"
          
          echo "Testing AERMET executable:"
          which aermet || echo "AERMET executable not found"
          
          echo "Testing AERMAP executable:"
          which aermap || echo "AERMAP executable not found"
      
      # Create success comment
      - name: Create success notification
        if: success()
        run: |
          echo "✅ Successfully installed and tested AERMOD Suite"
          echo ""
          echo "Components:"
          echo "- AERMOD: ${{ needs.check-for-new-versions.outputs.aermod_new_version || needs.check-for-new-versions.outputs.aermod_current_version }}"
          echo "- AERMET: ${{ needs.check-for-new-versions.outputs.aermet_new_version || needs.check-for-new-versions.outputs.aermet_current_version }}"
          echo "- AERMAP: ${{ needs.check-for-new-versions.outputs.aermap_new_version || needs.check-for-new-versions.outputs.aermap_current_version }}"
          
          # Calculate suite version
          AERMOD_VERSION="${{ needs.check-for-new-versions.outputs.aermod_new_version || needs.check-for-new-versions.outputs.aermod_current_version }}"
          AERMET_VERSION="${{ needs.check-for-new-versions.outputs.aermet_new_version || needs.check-for-new-versions.outputs.aermet_current_version }}"
          AERMAP_VERSION="${{ needs.check-for-new-versions.outputs.aermap_new_version || needs.check-for-new-versions.outputs.aermap_current_version }}"
          
          if [ "$AERMOD_VERSION" == "$AERMET_VERSION" ] && [ "$AERMET_VERSION" == "$AERMAP_VERSION" ]; then
            SUITE_VERSION="$AERMOD_VERSION"
          else
            SUITE_VERSION="${AERMOD_VERSION}-${AERMET_VERSION}-${AERMAP_VERSION}"
          fi
          
          echo "AERMOD Suite version: $SUITE_VERSION"

  create-issue-on-failure:
    name: Create Issue on Failure
    needs: [check-for-new-versions, update-formulas, test-aermod, test-aermet, test-aermap, test-aermod-suite, audit-and-style-fix]
    if: failure() && (needs.check-for-new-versions.outputs.any_updates == 'true' || github.event.inputs.force_run == 'true')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Prepare issue content
        id: prepare-issue
        run: |
          echo "### ⚠️ AERMOD Suite Update Workflow Failed" > ./workflow_failure_issue.md
          echo "" >> ./workflow_failure_issue.md
          echo "The automated weekly update and testing workflow for the AERMOD Suite Homebrew formulas has failed." >> ./workflow_failure_issue.md
          echo "" >> ./workflow_failure_issue.md
          echo "**Details:**" >> ./workflow_failure_issue.md
          echo "- **Trigger:** ${{ github.event_name }}" >> ./workflow_failure_issue.md
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "- **Force Run:** ${{ github.event.inputs.force_run }}" >> ./workflow_failure_issue.md
          fi
          echo "- **Run ID:** ${{ github.run_id }}" >> ./workflow_failure_issue.md
          echo "- **Run Attempt:** ${{ github.run_attempt }}" >> ./workflow_failure_issue.md
          echo "- **Link to Run:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" >> ./workflow_failure_issue.md
          echo "" >> ./workflow_failure_issue.md
          echo "**Failed Job(s):**" >> ./workflow_failure_issue.md
          if [ "${{ needs.check-for-new-versions.result }}" == "failure" ]; then
            echo "  - check-for-new-versions" >> ./workflow_failure_issue.md
          fi
          if [ "${{ needs.update-formulas.result }}" == "failure" ]; then
            echo "  - update-formulas" >> ./workflow_failure_issue.md
          fi
          if [ "${{ needs.test-aermod.result }}" == "failure" ]; then
            echo "  - test-aermod" >> ./workflow_failure_issue.md
          fi
          if [ "${{ needs.test-aermet.result }}" == "failure" ]; then
            echo "  - test-aermet" >> ./workflow_failure_issue.md
          fi
          if [ "${{ needs.test-aermap.result }}" == "failure" ]; then
            echo "  - test-aermap" >> ./workflow_failure_issue.md
          fi
          if [ "${{ needs.test-aermod-suite.result }}" == "failure" ]; then
            echo "  - test-aermod-suite" >> ./workflow_failure_issue.md
          fi
          if [ "${{ needs.audit-and-style-fix.result }}" == "failure" ]; then
            echo "  - audit-and-style-fix" >> ./workflow_failure_issue.md
          fi
          echo "" >> ./workflow_failure_issue.md
          echo "Please investigate the workflow logs for more details." >> ./workflow_failure_issue.md

      - name: Create Issue from File
        uses: peter-evans/create-issue-from-file@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          title: "AERMOD Suite Update Workflow Failed (${{ github.run_id }})"
          content-filepath: ./workflow_failure_issue.md # Corrected to content-filepath
          labels: bug, automation, workflow-failure
          assignees: liamswan

  test-summary:
    name: Test Summary
    needs: [test-aermod, test-aermet, test-aermap, test-aermod-suite]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Create test summary
        run: |
          echo "# AERMOD Suite Testing Summary"
          echo ""
          echo "## Test Results"
          echo ""
          
          if [ "${{ needs.test-aermod.result }}" == "success" ]; then
            echo "✅ AERMOD: Passed"
          elif [ "${{ needs.test-aermod.result }}" == "skipped" ]; then
            echo "⏭️ AERMOD: Skipped"
          else
            echo "❌ AERMOD: Failed"
          fi
          
          if [ "${{ needs.test-aermet.result }}" == "success" ]; then
            echo "✅ AERMET: Passed"
          elif [ "${{ needs.test-aermet.result }}" == "skipped" ]; then
            echo "⏭️ AERMET: Skipped"
          else
            echo "❌ AERMET: Failed"
          fi
          
          if [ "${{ needs.test-aermap.result }}" == "success" ]; then
            echo "✅ AERMAP: Passed"
          elif [ "${{ needs.test-aermap.result }}" == "skipped" ]; then
            echo "⏭️ AERMAP: Skipped"
          else
            echo "❌ AERMAP: Failed"
          fi
          
          if [ "${{ needs.test-aermod-suite.result }}" == "success" ]; then
            echo "✅ AERMOD Suite: Passed"
          elif [ "${{ needs.test-aermod-suite.result }}" == "skipped" ]; then
            echo "⏭️ AERMOD Suite: Skipped"
          else
            echo "❌ AERMOD Suite: Failed"
          fi
          
          echo ""
          echo "For more details, please check the individual job logs."
          
          # Overall status
          if [ "${{ needs.test-aermod.result }}" == "success" ] || [ "${{ needs.test-aermet.result }}" == "success" ] || [ "${{ needs.test-aermap.result }}" == "success" ]; then
            echo ""
            echo "At least one component passed testing. The formulas should be available for installation."
          fi
